/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package net.blackmamba.thrift.ltt;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LiveTeamToolsExtended {

  public interface Iface extends LiveTeamTools.Iface {

    public String createRoomInstanceByRoomName(String roomName) throws LTTException, RoomNameDontExistException, org.apache.thrift.TException;

    public String createRoomInstanceByRoomNameOnLeastLoadedServer(String roomName) throws LTTException, org.apache.thrift.TException;

    public List<Long> listPlayers(String room) throws LTTException, org.apache.thrift.TException;

    public boolean kickAllByOwner(String roomName) throws LTTException, RoomNameDontExistException, org.apache.thrift.TException;

    public boolean notifyToAll(String mode, String title, String msg, String imageUrl, String linkUrl) throws LTTException, org.apache.thrift.TException;

    public boolean notifyToUser(String mode, long userId, String title, List<String> titleArgs, String msg, List<String> msgArgs, String imageUrl, String linkUrl) throws LTTException, UserDontExistException, org.apache.thrift.TException;

    public boolean notifyToRoom(String mode, String roomName, String title, String msg, String imageUrl, String linkUrl) throws LTTException, RoomNameDontExistException, org.apache.thrift.TException;

    public boolean mutePlayer(long playerId, long duration) throws LTTException, org.apache.thrift.TException;

    public boolean unmutePlayer(long playerId) throws LTTException, org.apache.thrift.TException;

    public List<Long> listMutedPlayers() throws LTTException, org.apache.thrift.TException;

    public boolean inviteToRoom(long userId, String roomTitle, String roomName) throws org.apache.thrift.TException;

    public boolean recall(long userId, String roomName) throws org.apache.thrift.TException;

    public void clearCache() throws LTTException, org.apache.thrift.TException;

    public void clearArticleAndItemTypeCache() throws LTTException, org.apache.thrift.TException;

  }

  public interface AsyncIface extends LiveTeamTools .AsyncIface {

    public void createRoomInstanceByRoomName(String roomName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.createRoomInstanceByRoomName_call> resultHandler) throws org.apache.thrift.TException;

    public void createRoomInstanceByRoomNameOnLeastLoadedServer(String roomName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.createRoomInstanceByRoomNameOnLeastLoadedServer_call> resultHandler) throws org.apache.thrift.TException;

    public void listPlayers(String room, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.listPlayers_call> resultHandler) throws org.apache.thrift.TException;

    public void kickAllByOwner(String roomName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.kickAllByOwner_call> resultHandler) throws org.apache.thrift.TException;

    public void notifyToAll(String mode, String title, String msg, String imageUrl, String linkUrl, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.notifyToAll_call> resultHandler) throws org.apache.thrift.TException;

    public void notifyToUser(String mode, long userId, String title, List<String> titleArgs, String msg, List<String> msgArgs, String imageUrl, String linkUrl, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.notifyToUser_call> resultHandler) throws org.apache.thrift.TException;

    public void notifyToRoom(String mode, String roomName, String title, String msg, String imageUrl, String linkUrl, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.notifyToRoom_call> resultHandler) throws org.apache.thrift.TException;

    public void mutePlayer(long playerId, long duration, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.mutePlayer_call> resultHandler) throws org.apache.thrift.TException;

    public void unmutePlayer(long playerId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.unmutePlayer_call> resultHandler) throws org.apache.thrift.TException;

    public void listMutedPlayers(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.listMutedPlayers_call> resultHandler) throws org.apache.thrift.TException;

    public void inviteToRoom(long userId, String roomTitle, String roomName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.inviteToRoom_call> resultHandler) throws org.apache.thrift.TException;

    public void recall(long userId, String roomName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.recall_call> resultHandler) throws org.apache.thrift.TException;

    public void clearCache(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.clearCache_call> resultHandler) throws org.apache.thrift.TException;

    public void clearArticleAndItemTypeCache(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.clearArticleAndItemTypeCache_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends LiveTeamTools.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String createRoomInstanceByRoomName(String roomName) throws LTTException, RoomNameDontExistException, org.apache.thrift.TException
    {
      send_createRoomInstanceByRoomName(roomName);
      return recv_createRoomInstanceByRoomName();
    }

    public void send_createRoomInstanceByRoomName(String roomName) throws org.apache.thrift.TException
    {
      createRoomInstanceByRoomName_args args = new createRoomInstanceByRoomName_args();
      args.setRoomName(roomName);
      sendBase("createRoomInstanceByRoomName", args);
    }

    public String recv_createRoomInstanceByRoomName() throws LTTException, RoomNameDontExistException, org.apache.thrift.TException
    {
      createRoomInstanceByRoomName_result result = new createRoomInstanceByRoomName_result();
      receiveBase(result, "createRoomInstanceByRoomName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      if (result.rnde != null) {
        throw result.rnde;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createRoomInstanceByRoomName failed: unknown result");
    }

    public String createRoomInstanceByRoomNameOnLeastLoadedServer(String roomName) throws LTTException, org.apache.thrift.TException
    {
      send_createRoomInstanceByRoomNameOnLeastLoadedServer(roomName);
      return recv_createRoomInstanceByRoomNameOnLeastLoadedServer();
    }

    public void send_createRoomInstanceByRoomNameOnLeastLoadedServer(String roomName) throws org.apache.thrift.TException
    {
      createRoomInstanceByRoomNameOnLeastLoadedServer_args args = new createRoomInstanceByRoomNameOnLeastLoadedServer_args();
      args.setRoomName(roomName);
      sendBase("createRoomInstanceByRoomNameOnLeastLoadedServer", args);
    }

    public String recv_createRoomInstanceByRoomNameOnLeastLoadedServer() throws LTTException, org.apache.thrift.TException
    {
      createRoomInstanceByRoomNameOnLeastLoadedServer_result result = new createRoomInstanceByRoomNameOnLeastLoadedServer_result();
      receiveBase(result, "createRoomInstanceByRoomNameOnLeastLoadedServer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createRoomInstanceByRoomNameOnLeastLoadedServer failed: unknown result");
    }

    public List<Long> listPlayers(String room) throws LTTException, org.apache.thrift.TException
    {
      send_listPlayers(room);
      return recv_listPlayers();
    }

    public void send_listPlayers(String room) throws org.apache.thrift.TException
    {
      listPlayers_args args = new listPlayers_args();
      args.setRoom(room);
      sendBase("listPlayers", args);
    }

    public List<Long> recv_listPlayers() throws LTTException, org.apache.thrift.TException
    {
      listPlayers_result result = new listPlayers_result();
      receiveBase(result, "listPlayers");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listPlayers failed: unknown result");
    }

    public boolean kickAllByOwner(String roomName) throws LTTException, RoomNameDontExistException, org.apache.thrift.TException
    {
      send_kickAllByOwner(roomName);
      return recv_kickAllByOwner();
    }

    public void send_kickAllByOwner(String roomName) throws org.apache.thrift.TException
    {
      kickAllByOwner_args args = new kickAllByOwner_args();
      args.setRoomName(roomName);
      sendBase("kickAllByOwner", args);
    }

    public boolean recv_kickAllByOwner() throws LTTException, RoomNameDontExistException, org.apache.thrift.TException
    {
      kickAllByOwner_result result = new kickAllByOwner_result();
      receiveBase(result, "kickAllByOwner");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      if (result.rnde != null) {
        throw result.rnde;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "kickAllByOwner failed: unknown result");
    }

    public boolean notifyToAll(String mode, String title, String msg, String imageUrl, String linkUrl) throws LTTException, org.apache.thrift.TException
    {
      send_notifyToAll(mode, title, msg, imageUrl, linkUrl);
      return recv_notifyToAll();
    }

    public void send_notifyToAll(String mode, String title, String msg, String imageUrl, String linkUrl) throws org.apache.thrift.TException
    {
      notifyToAll_args args = new notifyToAll_args();
      args.setMode(mode);
      args.setTitle(title);
      args.setMsg(msg);
      args.setImageUrl(imageUrl);
      args.setLinkUrl(linkUrl);
      sendBase("notifyToAll", args);
    }

    public boolean recv_notifyToAll() throws LTTException, org.apache.thrift.TException
    {
      notifyToAll_result result = new notifyToAll_result();
      receiveBase(result, "notifyToAll");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "notifyToAll failed: unknown result");
    }

    public boolean notifyToUser(String mode, long userId, String title, List<String> titleArgs, String msg, List<String> msgArgs, String imageUrl, String linkUrl) throws LTTException, UserDontExistException, org.apache.thrift.TException
    {
      send_notifyToUser(mode, userId, title, titleArgs, msg, msgArgs, imageUrl, linkUrl);
      return recv_notifyToUser();
    }

    public void send_notifyToUser(String mode, long userId, String title, List<String> titleArgs, String msg, List<String> msgArgs, String imageUrl, String linkUrl) throws org.apache.thrift.TException
    {
      notifyToUser_args args = new notifyToUser_args();
      args.setMode(mode);
      args.setUserId(userId);
      args.setTitle(title);
      args.setTitleArgs(titleArgs);
      args.setMsg(msg);
      args.setMsgArgs(msgArgs);
      args.setImageUrl(imageUrl);
      args.setLinkUrl(linkUrl);
      sendBase("notifyToUser", args);
    }

    public boolean recv_notifyToUser() throws LTTException, UserDontExistException, org.apache.thrift.TException
    {
      notifyToUser_result result = new notifyToUser_result();
      receiveBase(result, "notifyToUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      if (result.udee != null) {
        throw result.udee;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "notifyToUser failed: unknown result");
    }

    public boolean notifyToRoom(String mode, String roomName, String title, String msg, String imageUrl, String linkUrl) throws LTTException, RoomNameDontExistException, org.apache.thrift.TException
    {
      send_notifyToRoom(mode, roomName, title, msg, imageUrl, linkUrl);
      return recv_notifyToRoom();
    }

    public void send_notifyToRoom(String mode, String roomName, String title, String msg, String imageUrl, String linkUrl) throws org.apache.thrift.TException
    {
      notifyToRoom_args args = new notifyToRoom_args();
      args.setMode(mode);
      args.setRoomName(roomName);
      args.setTitle(title);
      args.setMsg(msg);
      args.setImageUrl(imageUrl);
      args.setLinkUrl(linkUrl);
      sendBase("notifyToRoom", args);
    }

    public boolean recv_notifyToRoom() throws LTTException, RoomNameDontExistException, org.apache.thrift.TException
    {
      notifyToRoom_result result = new notifyToRoom_result();
      receiveBase(result, "notifyToRoom");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      if (result.rnde != null) {
        throw result.rnde;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "notifyToRoom failed: unknown result");
    }

    public boolean mutePlayer(long playerId, long duration) throws LTTException, org.apache.thrift.TException
    {
      send_mutePlayer(playerId, duration);
      return recv_mutePlayer();
    }

    public void send_mutePlayer(long playerId, long duration) throws org.apache.thrift.TException
    {
      mutePlayer_args args = new mutePlayer_args();
      args.setPlayerId(playerId);
      args.setDuration(duration);
      sendBase("mutePlayer", args);
    }

    public boolean recv_mutePlayer() throws LTTException, org.apache.thrift.TException
    {
      mutePlayer_result result = new mutePlayer_result();
      receiveBase(result, "mutePlayer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "mutePlayer failed: unknown result");
    }

    public boolean unmutePlayer(long playerId) throws LTTException, org.apache.thrift.TException
    {
      send_unmutePlayer(playerId);
      return recv_unmutePlayer();
    }

    public void send_unmutePlayer(long playerId) throws org.apache.thrift.TException
    {
      unmutePlayer_args args = new unmutePlayer_args();
      args.setPlayerId(playerId);
      sendBase("unmutePlayer", args);
    }

    public boolean recv_unmutePlayer() throws LTTException, org.apache.thrift.TException
    {
      unmutePlayer_result result = new unmutePlayer_result();
      receiveBase(result, "unmutePlayer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "unmutePlayer failed: unknown result");
    }

    public List<Long> listMutedPlayers() throws LTTException, org.apache.thrift.TException
    {
      send_listMutedPlayers();
      return recv_listMutedPlayers();
    }

    public void send_listMutedPlayers() throws org.apache.thrift.TException
    {
      listMutedPlayers_args args = new listMutedPlayers_args();
      sendBase("listMutedPlayers", args);
    }

    public List<Long> recv_listMutedPlayers() throws LTTException, org.apache.thrift.TException
    {
      listMutedPlayers_result result = new listMutedPlayers_result();
      receiveBase(result, "listMutedPlayers");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listMutedPlayers failed: unknown result");
    }

    public boolean inviteToRoom(long userId, String roomTitle, String roomName) throws org.apache.thrift.TException
    {
      send_inviteToRoom(userId, roomTitle, roomName);
      return recv_inviteToRoom();
    }

    public void send_inviteToRoom(long userId, String roomTitle, String roomName) throws org.apache.thrift.TException
    {
      inviteToRoom_args args = new inviteToRoom_args();
      args.setUserId(userId);
      args.setRoomTitle(roomTitle);
      args.setRoomName(roomName);
      sendBase("inviteToRoom", args);
    }

    public boolean recv_inviteToRoom() throws org.apache.thrift.TException
    {
      inviteToRoom_result result = new inviteToRoom_result();
      receiveBase(result, "inviteToRoom");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "inviteToRoom failed: unknown result");
    }

    public boolean recall(long userId, String roomName) throws org.apache.thrift.TException
    {
      send_recall(userId, roomName);
      return recv_recall();
    }

    public void send_recall(long userId, String roomName) throws org.apache.thrift.TException
    {
      recall_args args = new recall_args();
      args.setUserId(userId);
      args.setRoomName(roomName);
      sendBase("recall", args);
    }

    public boolean recv_recall() throws org.apache.thrift.TException
    {
      recall_result result = new recall_result();
      receiveBase(result, "recall");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "recall failed: unknown result");
    }

    public void clearCache() throws LTTException, org.apache.thrift.TException
    {
      send_clearCache();
      recv_clearCache();
    }

    public void send_clearCache() throws org.apache.thrift.TException
    {
      clearCache_args args = new clearCache_args();
      sendBase("clearCache", args);
    }

    public void recv_clearCache() throws LTTException, org.apache.thrift.TException
    {
      clearCache_result result = new clearCache_result();
      receiveBase(result, "clearCache");
      if (result.exc != null) {
        throw result.exc;
      }
      return;
    }

    public void clearArticleAndItemTypeCache() throws LTTException, org.apache.thrift.TException
    {
      send_clearArticleAndItemTypeCache();
      recv_clearArticleAndItemTypeCache();
    }

    public void send_clearArticleAndItemTypeCache() throws org.apache.thrift.TException
    {
      clearArticleAndItemTypeCache_args args = new clearArticleAndItemTypeCache_args();
      sendBase("clearArticleAndItemTypeCache", args);
    }

    public void recv_clearArticleAndItemTypeCache() throws LTTException, org.apache.thrift.TException
    {
      clearArticleAndItemTypeCache_result result = new clearArticleAndItemTypeCache_result();
      receiveBase(result, "clearArticleAndItemTypeCache");
      if (result.exc != null) {
        throw result.exc;
      }
      return;
    }

  }
  public static class AsyncClient extends LiveTeamTools.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createRoomInstanceByRoomName(String roomName, org.apache.thrift.async.AsyncMethodCallback<createRoomInstanceByRoomName_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createRoomInstanceByRoomName_call method_call = new createRoomInstanceByRoomName_call(roomName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createRoomInstanceByRoomName_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String roomName;
      public createRoomInstanceByRoomName_call(String roomName, org.apache.thrift.async.AsyncMethodCallback<createRoomInstanceByRoomName_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.roomName = roomName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createRoomInstanceByRoomName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createRoomInstanceByRoomName_args args = new createRoomInstanceByRoomName_args();
        args.setRoomName(roomName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws LTTException, RoomNameDontExistException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createRoomInstanceByRoomName();
      }
    }

    public void createRoomInstanceByRoomNameOnLeastLoadedServer(String roomName, org.apache.thrift.async.AsyncMethodCallback<createRoomInstanceByRoomNameOnLeastLoadedServer_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createRoomInstanceByRoomNameOnLeastLoadedServer_call method_call = new createRoomInstanceByRoomNameOnLeastLoadedServer_call(roomName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createRoomInstanceByRoomNameOnLeastLoadedServer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String roomName;
      public createRoomInstanceByRoomNameOnLeastLoadedServer_call(String roomName, org.apache.thrift.async.AsyncMethodCallback<createRoomInstanceByRoomNameOnLeastLoadedServer_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.roomName = roomName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createRoomInstanceByRoomNameOnLeastLoadedServer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createRoomInstanceByRoomNameOnLeastLoadedServer_args args = new createRoomInstanceByRoomNameOnLeastLoadedServer_args();
        args.setRoomName(roomName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws LTTException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createRoomInstanceByRoomNameOnLeastLoadedServer();
      }
    }

    public void listPlayers(String room, org.apache.thrift.async.AsyncMethodCallback<listPlayers_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listPlayers_call method_call = new listPlayers_call(room, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listPlayers_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String room;
      public listPlayers_call(String room, org.apache.thrift.async.AsyncMethodCallback<listPlayers_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.room = room;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listPlayers", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listPlayers_args args = new listPlayers_args();
        args.setRoom(room);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws LTTException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listPlayers();
      }
    }

    public void kickAllByOwner(String roomName, org.apache.thrift.async.AsyncMethodCallback<kickAllByOwner_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      kickAllByOwner_call method_call = new kickAllByOwner_call(roomName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class kickAllByOwner_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String roomName;
      public kickAllByOwner_call(String roomName, org.apache.thrift.async.AsyncMethodCallback<kickAllByOwner_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.roomName = roomName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("kickAllByOwner", org.apache.thrift.protocol.TMessageType.CALL, 0));
        kickAllByOwner_args args = new kickAllByOwner_args();
        args.setRoomName(roomName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws LTTException, RoomNameDontExistException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_kickAllByOwner();
      }
    }

    public void notifyToAll(String mode, String title, String msg, String imageUrl, String linkUrl, org.apache.thrift.async.AsyncMethodCallback<notifyToAll_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      notifyToAll_call method_call = new notifyToAll_call(mode, title, msg, imageUrl, linkUrl, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class notifyToAll_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String mode;
      private String title;
      private String msg;
      private String imageUrl;
      private String linkUrl;
      public notifyToAll_call(String mode, String title, String msg, String imageUrl, String linkUrl, org.apache.thrift.async.AsyncMethodCallback<notifyToAll_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mode = mode;
        this.title = title;
        this.msg = msg;
        this.imageUrl = imageUrl;
        this.linkUrl = linkUrl;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("notifyToAll", org.apache.thrift.protocol.TMessageType.CALL, 0));
        notifyToAll_args args = new notifyToAll_args();
        args.setMode(mode);
        args.setTitle(title);
        args.setMsg(msg);
        args.setImageUrl(imageUrl);
        args.setLinkUrl(linkUrl);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws LTTException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_notifyToAll();
      }
    }

    public void notifyToUser(String mode, long userId, String title, List<String> titleArgs, String msg, List<String> msgArgs, String imageUrl, String linkUrl, org.apache.thrift.async.AsyncMethodCallback<notifyToUser_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      notifyToUser_call method_call = new notifyToUser_call(mode, userId, title, titleArgs, msg, msgArgs, imageUrl, linkUrl, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class notifyToUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String mode;
      private long userId;
      private String title;
      private List<String> titleArgs;
      private String msg;
      private List<String> msgArgs;
      private String imageUrl;
      private String linkUrl;
      public notifyToUser_call(String mode, long userId, String title, List<String> titleArgs, String msg, List<String> msgArgs, String imageUrl, String linkUrl, org.apache.thrift.async.AsyncMethodCallback<notifyToUser_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mode = mode;
        this.userId = userId;
        this.title = title;
        this.titleArgs = titleArgs;
        this.msg = msg;
        this.msgArgs = msgArgs;
        this.imageUrl = imageUrl;
        this.linkUrl = linkUrl;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("notifyToUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        notifyToUser_args args = new notifyToUser_args();
        args.setMode(mode);
        args.setUserId(userId);
        args.setTitle(title);
        args.setTitleArgs(titleArgs);
        args.setMsg(msg);
        args.setMsgArgs(msgArgs);
        args.setImageUrl(imageUrl);
        args.setLinkUrl(linkUrl);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws LTTException, UserDontExistException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_notifyToUser();
      }
    }

    public void notifyToRoom(String mode, String roomName, String title, String msg, String imageUrl, String linkUrl, org.apache.thrift.async.AsyncMethodCallback<notifyToRoom_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      notifyToRoom_call method_call = new notifyToRoom_call(mode, roomName, title, msg, imageUrl, linkUrl, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class notifyToRoom_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String mode;
      private String roomName;
      private String title;
      private String msg;
      private String imageUrl;
      private String linkUrl;
      public notifyToRoom_call(String mode, String roomName, String title, String msg, String imageUrl, String linkUrl, org.apache.thrift.async.AsyncMethodCallback<notifyToRoom_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mode = mode;
        this.roomName = roomName;
        this.title = title;
        this.msg = msg;
        this.imageUrl = imageUrl;
        this.linkUrl = linkUrl;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("notifyToRoom", org.apache.thrift.protocol.TMessageType.CALL, 0));
        notifyToRoom_args args = new notifyToRoom_args();
        args.setMode(mode);
        args.setRoomName(roomName);
        args.setTitle(title);
        args.setMsg(msg);
        args.setImageUrl(imageUrl);
        args.setLinkUrl(linkUrl);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws LTTException, RoomNameDontExistException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_notifyToRoom();
      }
    }

    public void mutePlayer(long playerId, long duration, org.apache.thrift.async.AsyncMethodCallback<mutePlayer_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      mutePlayer_call method_call = new mutePlayer_call(playerId, duration, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class mutePlayer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long playerId;
      private long duration;
      public mutePlayer_call(long playerId, long duration, org.apache.thrift.async.AsyncMethodCallback<mutePlayer_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.playerId = playerId;
        this.duration = duration;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mutePlayer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        mutePlayer_args args = new mutePlayer_args();
        args.setPlayerId(playerId);
        args.setDuration(duration);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws LTTException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_mutePlayer();
      }
    }

    public void unmutePlayer(long playerId, org.apache.thrift.async.AsyncMethodCallback<unmutePlayer_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      unmutePlayer_call method_call = new unmutePlayer_call(playerId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class unmutePlayer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long playerId;
      public unmutePlayer_call(long playerId, org.apache.thrift.async.AsyncMethodCallback<unmutePlayer_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.playerId = playerId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("unmutePlayer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        unmutePlayer_args args = new unmutePlayer_args();
        args.setPlayerId(playerId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws LTTException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_unmutePlayer();
      }
    }

    public void listMutedPlayers(org.apache.thrift.async.AsyncMethodCallback<listMutedPlayers_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listMutedPlayers_call method_call = new listMutedPlayers_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listMutedPlayers_call extends org.apache.thrift.async.TAsyncMethodCall {
      public listMutedPlayers_call(org.apache.thrift.async.AsyncMethodCallback<listMutedPlayers_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listMutedPlayers", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listMutedPlayers_args args = new listMutedPlayers_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws LTTException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listMutedPlayers();
      }
    }

    public void inviteToRoom(long userId, String roomTitle, String roomName, org.apache.thrift.async.AsyncMethodCallback<inviteToRoom_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      inviteToRoom_call method_call = new inviteToRoom_call(userId, roomTitle, roomName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class inviteToRoom_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long userId;
      private String roomTitle;
      private String roomName;
      public inviteToRoom_call(long userId, String roomTitle, String roomName, org.apache.thrift.async.AsyncMethodCallback<inviteToRoom_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.roomTitle = roomTitle;
        this.roomName = roomName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("inviteToRoom", org.apache.thrift.protocol.TMessageType.CALL, 0));
        inviteToRoom_args args = new inviteToRoom_args();
        args.setUserId(userId);
        args.setRoomTitle(roomTitle);
        args.setRoomName(roomName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_inviteToRoom();
      }
    }

    public void recall(long userId, String roomName, org.apache.thrift.async.AsyncMethodCallback<recall_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      recall_call method_call = new recall_call(userId, roomName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class recall_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long userId;
      private String roomName;
      public recall_call(long userId, String roomName, org.apache.thrift.async.AsyncMethodCallback<recall_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.roomName = roomName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("recall", org.apache.thrift.protocol.TMessageType.CALL, 0));
        recall_args args = new recall_args();
        args.setUserId(userId);
        args.setRoomName(roomName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_recall();
      }
    }

    public void clearCache(org.apache.thrift.async.AsyncMethodCallback<clearCache_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      clearCache_call method_call = new clearCache_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class clearCache_call extends org.apache.thrift.async.TAsyncMethodCall {
      public clearCache_call(org.apache.thrift.async.AsyncMethodCallback<clearCache_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("clearCache", org.apache.thrift.protocol.TMessageType.CALL, 0));
        clearCache_args args = new clearCache_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws LTTException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_clearCache();
      }
    }

    public void clearArticleAndItemTypeCache(org.apache.thrift.async.AsyncMethodCallback<clearArticleAndItemTypeCache_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      clearArticleAndItemTypeCache_call method_call = new clearArticleAndItemTypeCache_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class clearArticleAndItemTypeCache_call extends org.apache.thrift.async.TAsyncMethodCall {
      public clearArticleAndItemTypeCache_call(org.apache.thrift.async.AsyncMethodCallback<clearArticleAndItemTypeCache_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("clearArticleAndItemTypeCache", org.apache.thrift.protocol.TMessageType.CALL, 0));
        clearArticleAndItemTypeCache_args args = new clearArticleAndItemTypeCache_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws LTTException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_clearArticleAndItemTypeCache();
      }
    }

  }

  public static class Processor<I extends Iface> extends LiveTeamTools.Processor implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createRoomInstanceByRoomName", new createRoomInstanceByRoomName());
      processMap.put("createRoomInstanceByRoomNameOnLeastLoadedServer", new createRoomInstanceByRoomNameOnLeastLoadedServer());
      processMap.put("listPlayers", new listPlayers());
      processMap.put("kickAllByOwner", new kickAllByOwner());
      processMap.put("notifyToAll", new notifyToAll());
      processMap.put("notifyToUser", new notifyToUser());
      processMap.put("notifyToRoom", new notifyToRoom());
      processMap.put("mutePlayer", new mutePlayer());
      processMap.put("unmutePlayer", new unmutePlayer());
      processMap.put("listMutedPlayers", new listMutedPlayers());
      processMap.put("inviteToRoom", new inviteToRoom());
      processMap.put("recall", new recall());
      processMap.put("clearCache", new clearCache());
      processMap.put("clearArticleAndItemTypeCache", new clearArticleAndItemTypeCache());
      return processMap;
    }

    private static class createRoomInstanceByRoomName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createRoomInstanceByRoomName_args> {
      public createRoomInstanceByRoomName() {
        super("createRoomInstanceByRoomName");
      }

      protected createRoomInstanceByRoomName_args getEmptyArgsInstance() {
        return new createRoomInstanceByRoomName_args();
      }

      protected createRoomInstanceByRoomName_result getResult(I iface, createRoomInstanceByRoomName_args args) throws org.apache.thrift.TException {
        createRoomInstanceByRoomName_result result = new createRoomInstanceByRoomName_result();
        try {
          result.success = iface.createRoomInstanceByRoomName(args.roomName);
        } catch (LTTException exc) {
          result.exc = exc;
        } catch (RoomNameDontExistException rnde) {
          result.rnde = rnde;
        }
        return result;
      }
    }

    private static class createRoomInstanceByRoomNameOnLeastLoadedServer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createRoomInstanceByRoomNameOnLeastLoadedServer_args> {
      public createRoomInstanceByRoomNameOnLeastLoadedServer() {
        super("createRoomInstanceByRoomNameOnLeastLoadedServer");
      }

      protected createRoomInstanceByRoomNameOnLeastLoadedServer_args getEmptyArgsInstance() {
        return new createRoomInstanceByRoomNameOnLeastLoadedServer_args();
      }

      protected createRoomInstanceByRoomNameOnLeastLoadedServer_result getResult(I iface, createRoomInstanceByRoomNameOnLeastLoadedServer_args args) throws org.apache.thrift.TException {
        createRoomInstanceByRoomNameOnLeastLoadedServer_result result = new createRoomInstanceByRoomNameOnLeastLoadedServer_result();
        try {
          result.success = iface.createRoomInstanceByRoomNameOnLeastLoadedServer(args.roomName);
        } catch (LTTException exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    private static class listPlayers<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listPlayers_args> {
      public listPlayers() {
        super("listPlayers");
      }

      protected listPlayers_args getEmptyArgsInstance() {
        return new listPlayers_args();
      }

      protected listPlayers_result getResult(I iface, listPlayers_args args) throws org.apache.thrift.TException {
        listPlayers_result result = new listPlayers_result();
        try {
          result.success = iface.listPlayers(args.room);
        } catch (LTTException exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    private static class kickAllByOwner<I extends Iface> extends org.apache.thrift.ProcessFunction<I, kickAllByOwner_args> {
      public kickAllByOwner() {
        super("kickAllByOwner");
      }

      protected kickAllByOwner_args getEmptyArgsInstance() {
        return new kickAllByOwner_args();
      }

      protected kickAllByOwner_result getResult(I iface, kickAllByOwner_args args) throws org.apache.thrift.TException {
        kickAllByOwner_result result = new kickAllByOwner_result();
        try {
          result.success = iface.kickAllByOwner(args.roomName);
          result.setSuccessIsSet(true);
        } catch (LTTException exc) {
          result.exc = exc;
        } catch (RoomNameDontExistException rnde) {
          result.rnde = rnde;
        }
        return result;
      }
    }

    private static class notifyToAll<I extends Iface> extends org.apache.thrift.ProcessFunction<I, notifyToAll_args> {
      public notifyToAll() {
        super("notifyToAll");
      }

      protected notifyToAll_args getEmptyArgsInstance() {
        return new notifyToAll_args();
      }

      protected notifyToAll_result getResult(I iface, notifyToAll_args args) throws org.apache.thrift.TException {
        notifyToAll_result result = new notifyToAll_result();
        try {
          result.success = iface.notifyToAll(args.mode, args.title, args.msg, args.imageUrl, args.linkUrl);
          result.setSuccessIsSet(true);
        } catch (LTTException exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    private static class notifyToUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, notifyToUser_args> {
      public notifyToUser() {
        super("notifyToUser");
      }

      protected notifyToUser_args getEmptyArgsInstance() {
        return new notifyToUser_args();
      }

      protected notifyToUser_result getResult(I iface, notifyToUser_args args) throws org.apache.thrift.TException {
        notifyToUser_result result = new notifyToUser_result();
        try {
          result.success = iface.notifyToUser(args.mode, args.userId, args.title, args.titleArgs, args.msg, args.msgArgs, args.imageUrl, args.linkUrl);
          result.setSuccessIsSet(true);
        } catch (LTTException exc) {
          result.exc = exc;
        } catch (UserDontExistException udee) {
          result.udee = udee;
        }
        return result;
      }
    }

    private static class notifyToRoom<I extends Iface> extends org.apache.thrift.ProcessFunction<I, notifyToRoom_args> {
      public notifyToRoom() {
        super("notifyToRoom");
      }

      protected notifyToRoom_args getEmptyArgsInstance() {
        return new notifyToRoom_args();
      }

      protected notifyToRoom_result getResult(I iface, notifyToRoom_args args) throws org.apache.thrift.TException {
        notifyToRoom_result result = new notifyToRoom_result();
        try {
          result.success = iface.notifyToRoom(args.mode, args.roomName, args.title, args.msg, args.imageUrl, args.linkUrl);
          result.setSuccessIsSet(true);
        } catch (LTTException exc) {
          result.exc = exc;
        } catch (RoomNameDontExistException rnde) {
          result.rnde = rnde;
        }
        return result;
      }
    }

    private static class mutePlayer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mutePlayer_args> {
      public mutePlayer() {
        super("mutePlayer");
      }

      protected mutePlayer_args getEmptyArgsInstance() {
        return new mutePlayer_args();
      }

      protected mutePlayer_result getResult(I iface, mutePlayer_args args) throws org.apache.thrift.TException {
        mutePlayer_result result = new mutePlayer_result();
        try {
          result.success = iface.mutePlayer(args.playerId, args.duration);
          result.setSuccessIsSet(true);
        } catch (LTTException exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    private static class unmutePlayer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, unmutePlayer_args> {
      public unmutePlayer() {
        super("unmutePlayer");
      }

      protected unmutePlayer_args getEmptyArgsInstance() {
        return new unmutePlayer_args();
      }

      protected unmutePlayer_result getResult(I iface, unmutePlayer_args args) throws org.apache.thrift.TException {
        unmutePlayer_result result = new unmutePlayer_result();
        try {
          result.success = iface.unmutePlayer(args.playerId);
          result.setSuccessIsSet(true);
        } catch (LTTException exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    private static class listMutedPlayers<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listMutedPlayers_args> {
      public listMutedPlayers() {
        super("listMutedPlayers");
      }

      protected listMutedPlayers_args getEmptyArgsInstance() {
        return new listMutedPlayers_args();
      }

      protected listMutedPlayers_result getResult(I iface, listMutedPlayers_args args) throws org.apache.thrift.TException {
        listMutedPlayers_result result = new listMutedPlayers_result();
        try {
          result.success = iface.listMutedPlayers();
        } catch (LTTException exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    private static class inviteToRoom<I extends Iface> extends org.apache.thrift.ProcessFunction<I, inviteToRoom_args> {
      public inviteToRoom() {
        super("inviteToRoom");
      }

      protected inviteToRoom_args getEmptyArgsInstance() {
        return new inviteToRoom_args();
      }

      protected inviteToRoom_result getResult(I iface, inviteToRoom_args args) throws org.apache.thrift.TException {
        inviteToRoom_result result = new inviteToRoom_result();
        result.success = iface.inviteToRoom(args.userId, args.roomTitle, args.roomName);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class recall<I extends Iface> extends org.apache.thrift.ProcessFunction<I, recall_args> {
      public recall() {
        super("recall");
      }

      protected recall_args getEmptyArgsInstance() {
        return new recall_args();
      }

      protected recall_result getResult(I iface, recall_args args) throws org.apache.thrift.TException {
        recall_result result = new recall_result();
        result.success = iface.recall(args.userId, args.roomName);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class clearCache<I extends Iface> extends org.apache.thrift.ProcessFunction<I, clearCache_args> {
      public clearCache() {
        super("clearCache");
      }

      protected clearCache_args getEmptyArgsInstance() {
        return new clearCache_args();
      }

      protected clearCache_result getResult(I iface, clearCache_args args) throws org.apache.thrift.TException {
        clearCache_result result = new clearCache_result();
        try {
          iface.clearCache();
        } catch (LTTException exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    private static class clearArticleAndItemTypeCache<I extends Iface> extends org.apache.thrift.ProcessFunction<I, clearArticleAndItemTypeCache_args> {
      public clearArticleAndItemTypeCache() {
        super("clearArticleAndItemTypeCache");
      }

      protected clearArticleAndItemTypeCache_args getEmptyArgsInstance() {
        return new clearArticleAndItemTypeCache_args();
      }

      protected clearArticleAndItemTypeCache_result getResult(I iface, clearArticleAndItemTypeCache_args args) throws org.apache.thrift.TException {
        clearArticleAndItemTypeCache_result result = new clearArticleAndItemTypeCache_result();
        try {
          iface.clearArticleAndItemTypeCache();
        } catch (LTTException exc) {
          result.exc = exc;
        }
        return result;
      }
    }

  }

  public static class createRoomInstanceByRoomName_args implements org.apache.thrift.TBase<createRoomInstanceByRoomName_args, createRoomInstanceByRoomName_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createRoomInstanceByRoomName_args");

    private static final org.apache.thrift.protocol.TField ROOM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("roomName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createRoomInstanceByRoomName_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createRoomInstanceByRoomName_argsTupleSchemeFactory());
    }

    public String roomName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROOM_NAME((short)1, "roomName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROOM_NAME
            return ROOM_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROOM_NAME, new org.apache.thrift.meta_data.FieldMetaData("roomName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "RoomName")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createRoomInstanceByRoomName_args.class, metaDataMap);
    }

    public createRoomInstanceByRoomName_args() {
    }

    public createRoomInstanceByRoomName_args(
      String roomName)
    {
      this();
      this.roomName = roomName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createRoomInstanceByRoomName_args(createRoomInstanceByRoomName_args other) {
      if (other.isSetRoomName()) {
        this.roomName = other.roomName;
      }
    }

    public createRoomInstanceByRoomName_args deepCopy() {
      return new createRoomInstanceByRoomName_args(this);
    }

    @Override
    public void clear() {
      this.roomName = null;
    }

    public String getRoomName() {
      return this.roomName;
    }

    public createRoomInstanceByRoomName_args setRoomName(String roomName) {
      this.roomName = roomName;
      return this;
    }

    public void unsetRoomName() {
      this.roomName = null;
    }

    /** Returns true if field roomName is set (has been assigned a value) and false otherwise */
    public boolean isSetRoomName() {
      return this.roomName != null;
    }

    public void setRoomNameIsSet(boolean value) {
      if (!value) {
        this.roomName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROOM_NAME:
        if (value == null) {
          unsetRoomName();
        } else {
          setRoomName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROOM_NAME:
        return getRoomName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROOM_NAME:
        return isSetRoomName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createRoomInstanceByRoomName_args)
        return this.equals((createRoomInstanceByRoomName_args)that);
      return false;
    }

    public boolean equals(createRoomInstanceByRoomName_args that) {
      if (that == null)
        return false;

      boolean this_present_roomName = true && this.isSetRoomName();
      boolean that_present_roomName = true && that.isSetRoomName();
      if (this_present_roomName || that_present_roomName) {
        if (!(this_present_roomName && that_present_roomName))
          return false;
        if (!this.roomName.equals(that.roomName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createRoomInstanceByRoomName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createRoomInstanceByRoomName_args typedOther = (createRoomInstanceByRoomName_args)other;

      lastComparison = Boolean.valueOf(isSetRoomName()).compareTo(typedOther.isSetRoomName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoomName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomName, typedOther.roomName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createRoomInstanceByRoomName_args(");
      boolean first = true;

      sb.append("roomName:");
      if (this.roomName == null) {
        sb.append("null");
      } else {
        sb.append(this.roomName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createRoomInstanceByRoomName_argsStandardSchemeFactory implements SchemeFactory {
      public createRoomInstanceByRoomName_argsStandardScheme getScheme() {
        return new createRoomInstanceByRoomName_argsStandardScheme();
      }
    }

    private static class createRoomInstanceByRoomName_argsStandardScheme extends StandardScheme<createRoomInstanceByRoomName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createRoomInstanceByRoomName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROOM_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.roomName = iprot.readString();
                struct.setRoomNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createRoomInstanceByRoomName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.roomName != null) {
          oprot.writeFieldBegin(ROOM_NAME_FIELD_DESC);
          oprot.writeString(struct.roomName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createRoomInstanceByRoomName_argsTupleSchemeFactory implements SchemeFactory {
      public createRoomInstanceByRoomName_argsTupleScheme getScheme() {
        return new createRoomInstanceByRoomName_argsTupleScheme();
      }
    }

    private static class createRoomInstanceByRoomName_argsTupleScheme extends TupleScheme<createRoomInstanceByRoomName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createRoomInstanceByRoomName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRoomName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRoomName()) {
          oprot.writeString(struct.roomName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createRoomInstanceByRoomName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.roomName = iprot.readString();
          struct.setRoomNameIsSet(true);
        }
      }
    }

  }

  public static class createRoomInstanceByRoomName_result implements org.apache.thrift.TBase<createRoomInstanceByRoomName_result, createRoomInstanceByRoomName_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createRoomInstanceByRoomName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RNDE_FIELD_DESC = new org.apache.thrift.protocol.TField("rnde", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createRoomInstanceByRoomName_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createRoomInstanceByRoomName_resultTupleSchemeFactory());
    }

    public String success; // required
    public LTTException exc; // required
    public RoomNameDontExistException rnde; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc"),
      RNDE((short)2, "rnde");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          case 2: // RNDE
            return RNDE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RNDE, new org.apache.thrift.meta_data.FieldMetaData("rnde", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createRoomInstanceByRoomName_result.class, metaDataMap);
    }

    public createRoomInstanceByRoomName_result() {
    }

    public createRoomInstanceByRoomName_result(
      String success,
      LTTException exc,
      RoomNameDontExistException rnde)
    {
      this();
      this.success = success;
      this.exc = exc;
      this.rnde = rnde;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createRoomInstanceByRoomName_result(createRoomInstanceByRoomName_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetExc()) {
        this.exc = new LTTException(other.exc);
      }
      if (other.isSetRnde()) {
        this.rnde = new RoomNameDontExistException(other.rnde);
      }
    }

    public createRoomInstanceByRoomName_result deepCopy() {
      return new createRoomInstanceByRoomName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
      this.rnde = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public createRoomInstanceByRoomName_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public LTTException getExc() {
      return this.exc;
    }

    public createRoomInstanceByRoomName_result setExc(LTTException exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public RoomNameDontExistException getRnde() {
      return this.rnde;
    }

    public createRoomInstanceByRoomName_result setRnde(RoomNameDontExistException rnde) {
      this.rnde = rnde;
      return this;
    }

    public void unsetRnde() {
      this.rnde = null;
    }

    /** Returns true if field rnde is set (has been assigned a value) and false otherwise */
    public boolean isSetRnde() {
      return this.rnde != null;
    }

    public void setRndeIsSet(boolean value) {
      if (!value) {
        this.rnde = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((LTTException)value);
        }
        break;

      case RNDE:
        if (value == null) {
          unsetRnde();
        } else {
          setRnde((RoomNameDontExistException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      case RNDE:
        return getRnde();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      case RNDE:
        return isSetRnde();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createRoomInstanceByRoomName_result)
        return this.equals((createRoomInstanceByRoomName_result)that);
      return false;
    }

    public boolean equals(createRoomInstanceByRoomName_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      boolean this_present_rnde = true && this.isSetRnde();
      boolean that_present_rnde = true && that.isSetRnde();
      if (this_present_rnde || that_present_rnde) {
        if (!(this_present_rnde && that_present_rnde))
          return false;
        if (!this.rnde.equals(that.rnde))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createRoomInstanceByRoomName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createRoomInstanceByRoomName_result typedOther = (createRoomInstanceByRoomName_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(typedOther.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, typedOther.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRnde()).compareTo(typedOther.isSetRnde());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRnde()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rnde, typedOther.rnde);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createRoomInstanceByRoomName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rnde:");
      if (this.rnde == null) {
        sb.append("null");
      } else {
        sb.append(this.rnde);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createRoomInstanceByRoomName_resultStandardSchemeFactory implements SchemeFactory {
      public createRoomInstanceByRoomName_resultStandardScheme getScheme() {
        return new createRoomInstanceByRoomName_resultStandardScheme();
      }
    }

    private static class createRoomInstanceByRoomName_resultStandardScheme extends StandardScheme<createRoomInstanceByRoomName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createRoomInstanceByRoomName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new LTTException();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RNDE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rnde = new RoomNameDontExistException();
                struct.rnde.read(iprot);
                struct.setRndeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createRoomInstanceByRoomName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.rnde != null) {
          oprot.writeFieldBegin(RNDE_FIELD_DESC);
          struct.rnde.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createRoomInstanceByRoomName_resultTupleSchemeFactory implements SchemeFactory {
      public createRoomInstanceByRoomName_resultTupleScheme getScheme() {
        return new createRoomInstanceByRoomName_resultTupleScheme();
      }
    }

    private static class createRoomInstanceByRoomName_resultTupleScheme extends TupleScheme<createRoomInstanceByRoomName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createRoomInstanceByRoomName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        if (struct.isSetRnde()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
        if (struct.isSetRnde()) {
          struct.rnde.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createRoomInstanceByRoomName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new LTTException();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
        if (incoming.get(2)) {
          struct.rnde = new RoomNameDontExistException();
          struct.rnde.read(iprot);
          struct.setRndeIsSet(true);
        }
      }
    }

  }

  public static class createRoomInstanceByRoomNameOnLeastLoadedServer_args implements org.apache.thrift.TBase<createRoomInstanceByRoomNameOnLeastLoadedServer_args, createRoomInstanceByRoomNameOnLeastLoadedServer_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createRoomInstanceByRoomNameOnLeastLoadedServer_args");

    private static final org.apache.thrift.protocol.TField ROOM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("roomName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createRoomInstanceByRoomNameOnLeastLoadedServer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createRoomInstanceByRoomNameOnLeastLoadedServer_argsTupleSchemeFactory());
    }

    public String roomName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROOM_NAME((short)1, "roomName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROOM_NAME
            return ROOM_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROOM_NAME, new org.apache.thrift.meta_data.FieldMetaData("roomName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "RoomName")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createRoomInstanceByRoomNameOnLeastLoadedServer_args.class, metaDataMap);
    }

    public createRoomInstanceByRoomNameOnLeastLoadedServer_args() {
    }

    public createRoomInstanceByRoomNameOnLeastLoadedServer_args(
      String roomName)
    {
      this();
      this.roomName = roomName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createRoomInstanceByRoomNameOnLeastLoadedServer_args(createRoomInstanceByRoomNameOnLeastLoadedServer_args other) {
      if (other.isSetRoomName()) {
        this.roomName = other.roomName;
      }
    }

    public createRoomInstanceByRoomNameOnLeastLoadedServer_args deepCopy() {
      return new createRoomInstanceByRoomNameOnLeastLoadedServer_args(this);
    }

    @Override
    public void clear() {
      this.roomName = null;
    }

    public String getRoomName() {
      return this.roomName;
    }

    public createRoomInstanceByRoomNameOnLeastLoadedServer_args setRoomName(String roomName) {
      this.roomName = roomName;
      return this;
    }

    public void unsetRoomName() {
      this.roomName = null;
    }

    /** Returns true if field roomName is set (has been assigned a value) and false otherwise */
    public boolean isSetRoomName() {
      return this.roomName != null;
    }

    public void setRoomNameIsSet(boolean value) {
      if (!value) {
        this.roomName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROOM_NAME:
        if (value == null) {
          unsetRoomName();
        } else {
          setRoomName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROOM_NAME:
        return getRoomName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROOM_NAME:
        return isSetRoomName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createRoomInstanceByRoomNameOnLeastLoadedServer_args)
        return this.equals((createRoomInstanceByRoomNameOnLeastLoadedServer_args)that);
      return false;
    }

    public boolean equals(createRoomInstanceByRoomNameOnLeastLoadedServer_args that) {
      if (that == null)
        return false;

      boolean this_present_roomName = true && this.isSetRoomName();
      boolean that_present_roomName = true && that.isSetRoomName();
      if (this_present_roomName || that_present_roomName) {
        if (!(this_present_roomName && that_present_roomName))
          return false;
        if (!this.roomName.equals(that.roomName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createRoomInstanceByRoomNameOnLeastLoadedServer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createRoomInstanceByRoomNameOnLeastLoadedServer_args typedOther = (createRoomInstanceByRoomNameOnLeastLoadedServer_args)other;

      lastComparison = Boolean.valueOf(isSetRoomName()).compareTo(typedOther.isSetRoomName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoomName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomName, typedOther.roomName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createRoomInstanceByRoomNameOnLeastLoadedServer_args(");
      boolean first = true;

      sb.append("roomName:");
      if (this.roomName == null) {
        sb.append("null");
      } else {
        sb.append(this.roomName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createRoomInstanceByRoomNameOnLeastLoadedServer_argsStandardSchemeFactory implements SchemeFactory {
      public createRoomInstanceByRoomNameOnLeastLoadedServer_argsStandardScheme getScheme() {
        return new createRoomInstanceByRoomNameOnLeastLoadedServer_argsStandardScheme();
      }
    }

    private static class createRoomInstanceByRoomNameOnLeastLoadedServer_argsStandardScheme extends StandardScheme<createRoomInstanceByRoomNameOnLeastLoadedServer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createRoomInstanceByRoomNameOnLeastLoadedServer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROOM_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.roomName = iprot.readString();
                struct.setRoomNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createRoomInstanceByRoomNameOnLeastLoadedServer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.roomName != null) {
          oprot.writeFieldBegin(ROOM_NAME_FIELD_DESC);
          oprot.writeString(struct.roomName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createRoomInstanceByRoomNameOnLeastLoadedServer_argsTupleSchemeFactory implements SchemeFactory {
      public createRoomInstanceByRoomNameOnLeastLoadedServer_argsTupleScheme getScheme() {
        return new createRoomInstanceByRoomNameOnLeastLoadedServer_argsTupleScheme();
      }
    }

    private static class createRoomInstanceByRoomNameOnLeastLoadedServer_argsTupleScheme extends TupleScheme<createRoomInstanceByRoomNameOnLeastLoadedServer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createRoomInstanceByRoomNameOnLeastLoadedServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRoomName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRoomName()) {
          oprot.writeString(struct.roomName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createRoomInstanceByRoomNameOnLeastLoadedServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.roomName = iprot.readString();
          struct.setRoomNameIsSet(true);
        }
      }
    }

  }

  public static class createRoomInstanceByRoomNameOnLeastLoadedServer_result implements org.apache.thrift.TBase<createRoomInstanceByRoomNameOnLeastLoadedServer_result, createRoomInstanceByRoomNameOnLeastLoadedServer_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createRoomInstanceByRoomNameOnLeastLoadedServer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createRoomInstanceByRoomNameOnLeastLoadedServer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createRoomInstanceByRoomNameOnLeastLoadedServer_resultTupleSchemeFactory());
    }

    public String success; // required
    public LTTException exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createRoomInstanceByRoomNameOnLeastLoadedServer_result.class, metaDataMap);
    }

    public createRoomInstanceByRoomNameOnLeastLoadedServer_result() {
    }

    public createRoomInstanceByRoomNameOnLeastLoadedServer_result(
      String success,
      LTTException exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createRoomInstanceByRoomNameOnLeastLoadedServer_result(createRoomInstanceByRoomNameOnLeastLoadedServer_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetExc()) {
        this.exc = new LTTException(other.exc);
      }
    }

    public createRoomInstanceByRoomNameOnLeastLoadedServer_result deepCopy() {
      return new createRoomInstanceByRoomNameOnLeastLoadedServer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public createRoomInstanceByRoomNameOnLeastLoadedServer_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public LTTException getExc() {
      return this.exc;
    }

    public createRoomInstanceByRoomNameOnLeastLoadedServer_result setExc(LTTException exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((LTTException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createRoomInstanceByRoomNameOnLeastLoadedServer_result)
        return this.equals((createRoomInstanceByRoomNameOnLeastLoadedServer_result)that);
      return false;
    }

    public boolean equals(createRoomInstanceByRoomNameOnLeastLoadedServer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createRoomInstanceByRoomNameOnLeastLoadedServer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createRoomInstanceByRoomNameOnLeastLoadedServer_result typedOther = (createRoomInstanceByRoomNameOnLeastLoadedServer_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(typedOther.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, typedOther.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createRoomInstanceByRoomNameOnLeastLoadedServer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createRoomInstanceByRoomNameOnLeastLoadedServer_resultStandardSchemeFactory implements SchemeFactory {
      public createRoomInstanceByRoomNameOnLeastLoadedServer_resultStandardScheme getScheme() {
        return new createRoomInstanceByRoomNameOnLeastLoadedServer_resultStandardScheme();
      }
    }

    private static class createRoomInstanceByRoomNameOnLeastLoadedServer_resultStandardScheme extends StandardScheme<createRoomInstanceByRoomNameOnLeastLoadedServer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createRoomInstanceByRoomNameOnLeastLoadedServer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new LTTException();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createRoomInstanceByRoomNameOnLeastLoadedServer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createRoomInstanceByRoomNameOnLeastLoadedServer_resultTupleSchemeFactory implements SchemeFactory {
      public createRoomInstanceByRoomNameOnLeastLoadedServer_resultTupleScheme getScheme() {
        return new createRoomInstanceByRoomNameOnLeastLoadedServer_resultTupleScheme();
      }
    }

    private static class createRoomInstanceByRoomNameOnLeastLoadedServer_resultTupleScheme extends TupleScheme<createRoomInstanceByRoomNameOnLeastLoadedServer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createRoomInstanceByRoomNameOnLeastLoadedServer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createRoomInstanceByRoomNameOnLeastLoadedServer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new LTTException();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class listPlayers_args implements org.apache.thrift.TBase<listPlayers_args, listPlayers_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listPlayers_args");

    private static final org.apache.thrift.protocol.TField ROOM_FIELD_DESC = new org.apache.thrift.protocol.TField("room", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listPlayers_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listPlayers_argsTupleSchemeFactory());
    }

    public String room; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROOM((short)1, "room");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROOM
            return ROOM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROOM, new org.apache.thrift.meta_data.FieldMetaData("room", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "RoomName")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listPlayers_args.class, metaDataMap);
    }

    public listPlayers_args() {
    }

    public listPlayers_args(
      String room)
    {
      this();
      this.room = room;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listPlayers_args(listPlayers_args other) {
      if (other.isSetRoom()) {
        this.room = other.room;
      }
    }

    public listPlayers_args deepCopy() {
      return new listPlayers_args(this);
    }

    @Override
    public void clear() {
      this.room = null;
    }

    public String getRoom() {
      return this.room;
    }

    public listPlayers_args setRoom(String room) {
      this.room = room;
      return this;
    }

    public void unsetRoom() {
      this.room = null;
    }

    /** Returns true if field room is set (has been assigned a value) and false otherwise */
    public boolean isSetRoom() {
      return this.room != null;
    }

    public void setRoomIsSet(boolean value) {
      if (!value) {
        this.room = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROOM:
        if (value == null) {
          unsetRoom();
        } else {
          setRoom((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROOM:
        return getRoom();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROOM:
        return isSetRoom();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listPlayers_args)
        return this.equals((listPlayers_args)that);
      return false;
    }

    public boolean equals(listPlayers_args that) {
      if (that == null)
        return false;

      boolean this_present_room = true && this.isSetRoom();
      boolean that_present_room = true && that.isSetRoom();
      if (this_present_room || that_present_room) {
        if (!(this_present_room && that_present_room))
          return false;
        if (!this.room.equals(that.room))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listPlayers_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listPlayers_args typedOther = (listPlayers_args)other;

      lastComparison = Boolean.valueOf(isSetRoom()).compareTo(typedOther.isSetRoom());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoom()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.room, typedOther.room);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listPlayers_args(");
      boolean first = true;

      sb.append("room:");
      if (this.room == null) {
        sb.append("null");
      } else {
        sb.append(this.room);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listPlayers_argsStandardSchemeFactory implements SchemeFactory {
      public listPlayers_argsStandardScheme getScheme() {
        return new listPlayers_argsStandardScheme();
      }
    }

    private static class listPlayers_argsStandardScheme extends StandardScheme<listPlayers_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listPlayers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROOM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.room = iprot.readString();
                struct.setRoomIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listPlayers_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.room != null) {
          oprot.writeFieldBegin(ROOM_FIELD_DESC);
          oprot.writeString(struct.room);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listPlayers_argsTupleSchemeFactory implements SchemeFactory {
      public listPlayers_argsTupleScheme getScheme() {
        return new listPlayers_argsTupleScheme();
      }
    }

    private static class listPlayers_argsTupleScheme extends TupleScheme<listPlayers_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listPlayers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRoom()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRoom()) {
          oprot.writeString(struct.room);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listPlayers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.room = iprot.readString();
          struct.setRoomIsSet(true);
        }
      }
    }

  }

  public static class listPlayers_result implements org.apache.thrift.TBase<listPlayers_result, listPlayers_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listPlayers_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listPlayers_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listPlayers_resultTupleSchemeFactory());
    }

    public List<Long> success; // required
    public LTTException exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64              , "UserId"))));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listPlayers_result.class, metaDataMap);
    }

    public listPlayers_result() {
    }

    public listPlayers_result(
      List<Long> success,
      LTTException exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listPlayers_result(listPlayers_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>();
        for (Long other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetExc()) {
        this.exc = new LTTException(other.exc);
      }
    }

    public listPlayers_result deepCopy() {
      return new listPlayers_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public listPlayers_result setSuccess(List<Long> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public LTTException getExc() {
      return this.exc;
    }

    public listPlayers_result setExc(LTTException exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((LTTException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listPlayers_result)
        return this.equals((listPlayers_result)that);
      return false;
    }

    public boolean equals(listPlayers_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listPlayers_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listPlayers_result typedOther = (listPlayers_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(typedOther.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, typedOther.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listPlayers_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listPlayers_resultStandardSchemeFactory implements SchemeFactory {
      public listPlayers_resultStandardScheme getScheme() {
        return new listPlayers_resultStandardScheme();
      }
    }

    private static class listPlayers_resultStandardScheme extends StandardScheme<listPlayers_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listPlayers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    long _elem10; // required
                    _elem10 = iprot.readI64();
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new LTTException();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listPlayers_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter11 : struct.success)
            {
              oprot.writeI64(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listPlayers_resultTupleSchemeFactory implements SchemeFactory {
      public listPlayers_resultTupleScheme getScheme() {
        return new listPlayers_resultTupleScheme();
      }
    }

    private static class listPlayers_resultTupleScheme extends TupleScheme<listPlayers_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listPlayers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter12 : struct.success)
            {
              oprot.writeI64(_iter12);
            }
          }
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listPlayers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              long _elem15; // required
              _elem15 = iprot.readI64();
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new LTTException();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class kickAllByOwner_args implements org.apache.thrift.TBase<kickAllByOwner_args, kickAllByOwner_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("kickAllByOwner_args");

    private static final org.apache.thrift.protocol.TField ROOM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("roomName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new kickAllByOwner_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new kickAllByOwner_argsTupleSchemeFactory());
    }

    public String roomName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROOM_NAME((short)1, "roomName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROOM_NAME
            return ROOM_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROOM_NAME, new org.apache.thrift.meta_data.FieldMetaData("roomName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "RoomName")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(kickAllByOwner_args.class, metaDataMap);
    }

    public kickAllByOwner_args() {
    }

    public kickAllByOwner_args(
      String roomName)
    {
      this();
      this.roomName = roomName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public kickAllByOwner_args(kickAllByOwner_args other) {
      if (other.isSetRoomName()) {
        this.roomName = other.roomName;
      }
    }

    public kickAllByOwner_args deepCopy() {
      return new kickAllByOwner_args(this);
    }

    @Override
    public void clear() {
      this.roomName = null;
    }

    public String getRoomName() {
      return this.roomName;
    }

    public kickAllByOwner_args setRoomName(String roomName) {
      this.roomName = roomName;
      return this;
    }

    public void unsetRoomName() {
      this.roomName = null;
    }

    /** Returns true if field roomName is set (has been assigned a value) and false otherwise */
    public boolean isSetRoomName() {
      return this.roomName != null;
    }

    public void setRoomNameIsSet(boolean value) {
      if (!value) {
        this.roomName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROOM_NAME:
        if (value == null) {
          unsetRoomName();
        } else {
          setRoomName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROOM_NAME:
        return getRoomName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROOM_NAME:
        return isSetRoomName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof kickAllByOwner_args)
        return this.equals((kickAllByOwner_args)that);
      return false;
    }

    public boolean equals(kickAllByOwner_args that) {
      if (that == null)
        return false;

      boolean this_present_roomName = true && this.isSetRoomName();
      boolean that_present_roomName = true && that.isSetRoomName();
      if (this_present_roomName || that_present_roomName) {
        if (!(this_present_roomName && that_present_roomName))
          return false;
        if (!this.roomName.equals(that.roomName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(kickAllByOwner_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      kickAllByOwner_args typedOther = (kickAllByOwner_args)other;

      lastComparison = Boolean.valueOf(isSetRoomName()).compareTo(typedOther.isSetRoomName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoomName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomName, typedOther.roomName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("kickAllByOwner_args(");
      boolean first = true;

      sb.append("roomName:");
      if (this.roomName == null) {
        sb.append("null");
      } else {
        sb.append(this.roomName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class kickAllByOwner_argsStandardSchemeFactory implements SchemeFactory {
      public kickAllByOwner_argsStandardScheme getScheme() {
        return new kickAllByOwner_argsStandardScheme();
      }
    }

    private static class kickAllByOwner_argsStandardScheme extends StandardScheme<kickAllByOwner_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, kickAllByOwner_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROOM_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.roomName = iprot.readString();
                struct.setRoomNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, kickAllByOwner_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.roomName != null) {
          oprot.writeFieldBegin(ROOM_NAME_FIELD_DESC);
          oprot.writeString(struct.roomName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class kickAllByOwner_argsTupleSchemeFactory implements SchemeFactory {
      public kickAllByOwner_argsTupleScheme getScheme() {
        return new kickAllByOwner_argsTupleScheme();
      }
    }

    private static class kickAllByOwner_argsTupleScheme extends TupleScheme<kickAllByOwner_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, kickAllByOwner_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRoomName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRoomName()) {
          oprot.writeString(struct.roomName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, kickAllByOwner_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.roomName = iprot.readString();
          struct.setRoomNameIsSet(true);
        }
      }
    }

  }

  public static class kickAllByOwner_result implements org.apache.thrift.TBase<kickAllByOwner_result, kickAllByOwner_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("kickAllByOwner_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RNDE_FIELD_DESC = new org.apache.thrift.protocol.TField("rnde", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new kickAllByOwner_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new kickAllByOwner_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public LTTException exc; // required
    public RoomNameDontExistException rnde; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc"),
      RNDE((short)2, "rnde");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          case 2: // RNDE
            return RNDE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RNDE, new org.apache.thrift.meta_data.FieldMetaData("rnde", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(kickAllByOwner_result.class, metaDataMap);
    }

    public kickAllByOwner_result() {
    }

    public kickAllByOwner_result(
      boolean success,
      LTTException exc,
      RoomNameDontExistException rnde)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.exc = exc;
      this.rnde = rnde;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public kickAllByOwner_result(kickAllByOwner_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetExc()) {
        this.exc = new LTTException(other.exc);
      }
      if (other.isSetRnde()) {
        this.rnde = new RoomNameDontExistException(other.rnde);
      }
    }

    public kickAllByOwner_result deepCopy() {
      return new kickAllByOwner_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.exc = null;
      this.rnde = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public kickAllByOwner_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public LTTException getExc() {
      return this.exc;
    }

    public kickAllByOwner_result setExc(LTTException exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public RoomNameDontExistException getRnde() {
      return this.rnde;
    }

    public kickAllByOwner_result setRnde(RoomNameDontExistException rnde) {
      this.rnde = rnde;
      return this;
    }

    public void unsetRnde() {
      this.rnde = null;
    }

    /** Returns true if field rnde is set (has been assigned a value) and false otherwise */
    public boolean isSetRnde() {
      return this.rnde != null;
    }

    public void setRndeIsSet(boolean value) {
      if (!value) {
        this.rnde = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((LTTException)value);
        }
        break;

      case RNDE:
        if (value == null) {
          unsetRnde();
        } else {
          setRnde((RoomNameDontExistException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case EXC:
        return getExc();

      case RNDE:
        return getRnde();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      case RNDE:
        return isSetRnde();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof kickAllByOwner_result)
        return this.equals((kickAllByOwner_result)that);
      return false;
    }

    public boolean equals(kickAllByOwner_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      boolean this_present_rnde = true && this.isSetRnde();
      boolean that_present_rnde = true && that.isSetRnde();
      if (this_present_rnde || that_present_rnde) {
        if (!(this_present_rnde && that_present_rnde))
          return false;
        if (!this.rnde.equals(that.rnde))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(kickAllByOwner_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      kickAllByOwner_result typedOther = (kickAllByOwner_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(typedOther.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, typedOther.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRnde()).compareTo(typedOther.isSetRnde());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRnde()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rnde, typedOther.rnde);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("kickAllByOwner_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rnde:");
      if (this.rnde == null) {
        sb.append("null");
      } else {
        sb.append(this.rnde);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class kickAllByOwner_resultStandardSchemeFactory implements SchemeFactory {
      public kickAllByOwner_resultStandardScheme getScheme() {
        return new kickAllByOwner_resultStandardScheme();
      }
    }

    private static class kickAllByOwner_resultStandardScheme extends StandardScheme<kickAllByOwner_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, kickAllByOwner_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new LTTException();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RNDE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rnde = new RoomNameDontExistException();
                struct.rnde.read(iprot);
                struct.setRndeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, kickAllByOwner_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.rnde != null) {
          oprot.writeFieldBegin(RNDE_FIELD_DESC);
          struct.rnde.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class kickAllByOwner_resultTupleSchemeFactory implements SchemeFactory {
      public kickAllByOwner_resultTupleScheme getScheme() {
        return new kickAllByOwner_resultTupleScheme();
      }
    }

    private static class kickAllByOwner_resultTupleScheme extends TupleScheme<kickAllByOwner_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, kickAllByOwner_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        if (struct.isSetRnde()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
        if (struct.isSetRnde()) {
          struct.rnde.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, kickAllByOwner_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new LTTException();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
        if (incoming.get(2)) {
          struct.rnde = new RoomNameDontExistException();
          struct.rnde.read(iprot);
          struct.setRndeIsSet(true);
        }
      }
    }

  }

  public static class notifyToAll_args implements org.apache.thrift.TBase<notifyToAll_args, notifyToAll_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifyToAll_args");

    private static final org.apache.thrift.protocol.TField MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("mode", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField IMAGE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("imageUrl", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField LINK_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("linkUrl", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new notifyToAll_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new notifyToAll_argsTupleSchemeFactory());
    }

    public String mode; // required
    public String title; // required
    public String msg; // required
    public String imageUrl; // required
    public String linkUrl; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MODE((short)1, "mode"),
      TITLE((short)2, "title"),
      MSG((short)3, "msg"),
      IMAGE_URL((short)4, "imageUrl"),
      LINK_URL((short)5, "linkUrl");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODE
            return MODE;
          case 2: // TITLE
            return TITLE;
          case 3: // MSG
            return MSG;
          case 4: // IMAGE_URL
            return IMAGE_URL;
          case 5: // LINK_URL
            return LINK_URL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODE, new org.apache.thrift.meta_data.FieldMetaData("mode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IMAGE_URL, new org.apache.thrift.meta_data.FieldMetaData("imageUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LINK_URL, new org.apache.thrift.meta_data.FieldMetaData("linkUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifyToAll_args.class, metaDataMap);
    }

    public notifyToAll_args() {
    }

    public notifyToAll_args(
      String mode,
      String title,
      String msg,
      String imageUrl,
      String linkUrl)
    {
      this();
      this.mode = mode;
      this.title = title;
      this.msg = msg;
      this.imageUrl = imageUrl;
      this.linkUrl = linkUrl;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyToAll_args(notifyToAll_args other) {
      if (other.isSetMode()) {
        this.mode = other.mode;
      }
      if (other.isSetTitle()) {
        this.title = other.title;
      }
      if (other.isSetMsg()) {
        this.msg = other.msg;
      }
      if (other.isSetImageUrl()) {
        this.imageUrl = other.imageUrl;
      }
      if (other.isSetLinkUrl()) {
        this.linkUrl = other.linkUrl;
      }
    }

    public notifyToAll_args deepCopy() {
      return new notifyToAll_args(this);
    }

    @Override
    public void clear() {
      this.mode = null;
      this.title = null;
      this.msg = null;
      this.imageUrl = null;
      this.linkUrl = null;
    }

    public String getMode() {
      return this.mode;
    }

    public notifyToAll_args setMode(String mode) {
      this.mode = mode;
      return this;
    }

    public void unsetMode() {
      this.mode = null;
    }

    /** Returns true if field mode is set (has been assigned a value) and false otherwise */
    public boolean isSetMode() {
      return this.mode != null;
    }

    public void setModeIsSet(boolean value) {
      if (!value) {
        this.mode = null;
      }
    }

    public String getTitle() {
      return this.title;
    }

    public notifyToAll_args setTitle(String title) {
      this.title = title;
      return this;
    }

    public void unsetTitle() {
      this.title = null;
    }

    /** Returns true if field title is set (has been assigned a value) and false otherwise */
    public boolean isSetTitle() {
      return this.title != null;
    }

    public void setTitleIsSet(boolean value) {
      if (!value) {
        this.title = null;
      }
    }

    public String getMsg() {
      return this.msg;
    }

    public notifyToAll_args setMsg(String msg) {
      this.msg = msg;
      return this;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    public String getImageUrl() {
      return this.imageUrl;
    }

    public notifyToAll_args setImageUrl(String imageUrl) {
      this.imageUrl = imageUrl;
      return this;
    }

    public void unsetImageUrl() {
      this.imageUrl = null;
    }

    /** Returns true if field imageUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetImageUrl() {
      return this.imageUrl != null;
    }

    public void setImageUrlIsSet(boolean value) {
      if (!value) {
        this.imageUrl = null;
      }
    }

    public String getLinkUrl() {
      return this.linkUrl;
    }

    public notifyToAll_args setLinkUrl(String linkUrl) {
      this.linkUrl = linkUrl;
      return this;
    }

    public void unsetLinkUrl() {
      this.linkUrl = null;
    }

    /** Returns true if field linkUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetLinkUrl() {
      return this.linkUrl != null;
    }

    public void setLinkUrlIsSet(boolean value) {
      if (!value) {
        this.linkUrl = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MODE:
        if (value == null) {
          unsetMode();
        } else {
          setMode((String)value);
        }
        break;

      case TITLE:
        if (value == null) {
          unsetTitle();
        } else {
          setTitle((String)value);
        }
        break;

      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          setMsg((String)value);
        }
        break;

      case IMAGE_URL:
        if (value == null) {
          unsetImageUrl();
        } else {
          setImageUrl((String)value);
        }
        break;

      case LINK_URL:
        if (value == null) {
          unsetLinkUrl();
        } else {
          setLinkUrl((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MODE:
        return getMode();

      case TITLE:
        return getTitle();

      case MSG:
        return getMsg();

      case IMAGE_URL:
        return getImageUrl();

      case LINK_URL:
        return getLinkUrl();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MODE:
        return isSetMode();
      case TITLE:
        return isSetTitle();
      case MSG:
        return isSetMsg();
      case IMAGE_URL:
        return isSetImageUrl();
      case LINK_URL:
        return isSetLinkUrl();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyToAll_args)
        return this.equals((notifyToAll_args)that);
      return false;
    }

    public boolean equals(notifyToAll_args that) {
      if (that == null)
        return false;

      boolean this_present_mode = true && this.isSetMode();
      boolean that_present_mode = true && that.isSetMode();
      if (this_present_mode || that_present_mode) {
        if (!(this_present_mode && that_present_mode))
          return false;
        if (!this.mode.equals(that.mode))
          return false;
      }

      boolean this_present_title = true && this.isSetTitle();
      boolean that_present_title = true && that.isSetTitle();
      if (this_present_title || that_present_title) {
        if (!(this_present_title && that_present_title))
          return false;
        if (!this.title.equals(that.title))
          return false;
      }

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      boolean this_present_imageUrl = true && this.isSetImageUrl();
      boolean that_present_imageUrl = true && that.isSetImageUrl();
      if (this_present_imageUrl || that_present_imageUrl) {
        if (!(this_present_imageUrl && that_present_imageUrl))
          return false;
        if (!this.imageUrl.equals(that.imageUrl))
          return false;
      }

      boolean this_present_linkUrl = true && this.isSetLinkUrl();
      boolean that_present_linkUrl = true && that.isSetLinkUrl();
      if (this_present_linkUrl || that_present_linkUrl) {
        if (!(this_present_linkUrl && that_present_linkUrl))
          return false;
        if (!this.linkUrl.equals(that.linkUrl))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(notifyToAll_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      notifyToAll_args typedOther = (notifyToAll_args)other;

      lastComparison = Boolean.valueOf(isSetMode()).compareTo(typedOther.isSetMode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mode, typedOther.mode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTitle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, typedOther.title);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMsg()).compareTo(typedOther.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, typedOther.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetImageUrl()).compareTo(typedOther.isSetImageUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImageUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageUrl, typedOther.imageUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLinkUrl()).compareTo(typedOther.isSetLinkUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLinkUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkUrl, typedOther.linkUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("notifyToAll_args(");
      boolean first = true;

      sb.append("mode:");
      if (this.mode == null) {
        sb.append("null");
      } else {
        sb.append(this.mode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("imageUrl:");
      if (this.imageUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.imageUrl);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("linkUrl:");
      if (this.linkUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.linkUrl);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifyToAll_argsStandardSchemeFactory implements SchemeFactory {
      public notifyToAll_argsStandardScheme getScheme() {
        return new notifyToAll_argsStandardScheme();
      }
    }

    private static class notifyToAll_argsStandardScheme extends StandardScheme<notifyToAll_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifyToAll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mode = iprot.readString();
                struct.setModeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TITLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.title = iprot.readString();
                struct.setTitleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.msg = iprot.readString();
                struct.setMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // IMAGE_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.imageUrl = iprot.readString();
                struct.setImageUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // LINK_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.linkUrl = iprot.readString();
                struct.setLinkUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifyToAll_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mode != null) {
          oprot.writeFieldBegin(MODE_FIELD_DESC);
          oprot.writeString(struct.mode);
          oprot.writeFieldEnd();
        }
        if (struct.title != null) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
        if (struct.msg != null) {
          oprot.writeFieldBegin(MSG_FIELD_DESC);
          oprot.writeString(struct.msg);
          oprot.writeFieldEnd();
        }
        if (struct.imageUrl != null) {
          oprot.writeFieldBegin(IMAGE_URL_FIELD_DESC);
          oprot.writeString(struct.imageUrl);
          oprot.writeFieldEnd();
        }
        if (struct.linkUrl != null) {
          oprot.writeFieldBegin(LINK_URL_FIELD_DESC);
          oprot.writeString(struct.linkUrl);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifyToAll_argsTupleSchemeFactory implements SchemeFactory {
      public notifyToAll_argsTupleScheme getScheme() {
        return new notifyToAll_argsTupleScheme();
      }
    }

    private static class notifyToAll_argsTupleScheme extends TupleScheme<notifyToAll_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifyToAll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMode()) {
          optionals.set(0);
        }
        if (struct.isSetTitle()) {
          optionals.set(1);
        }
        if (struct.isSetMsg()) {
          optionals.set(2);
        }
        if (struct.isSetImageUrl()) {
          optionals.set(3);
        }
        if (struct.isSetLinkUrl()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetMode()) {
          oprot.writeString(struct.mode);
        }
        if (struct.isSetTitle()) {
          oprot.writeString(struct.title);
        }
        if (struct.isSetMsg()) {
          oprot.writeString(struct.msg);
        }
        if (struct.isSetImageUrl()) {
          oprot.writeString(struct.imageUrl);
        }
        if (struct.isSetLinkUrl()) {
          oprot.writeString(struct.linkUrl);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifyToAll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.mode = iprot.readString();
          struct.setModeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.title = iprot.readString();
          struct.setTitleIsSet(true);
        }
        if (incoming.get(2)) {
          struct.msg = iprot.readString();
          struct.setMsgIsSet(true);
        }
        if (incoming.get(3)) {
          struct.imageUrl = iprot.readString();
          struct.setImageUrlIsSet(true);
        }
        if (incoming.get(4)) {
          struct.linkUrl = iprot.readString();
          struct.setLinkUrlIsSet(true);
        }
      }
    }

  }

  public static class notifyToAll_result implements org.apache.thrift.TBase<notifyToAll_result, notifyToAll_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifyToAll_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new notifyToAll_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new notifyToAll_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public LTTException exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifyToAll_result.class, metaDataMap);
    }

    public notifyToAll_result() {
    }

    public notifyToAll_result(
      boolean success,
      LTTException exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyToAll_result(notifyToAll_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetExc()) {
        this.exc = new LTTException(other.exc);
      }
    }

    public notifyToAll_result deepCopy() {
      return new notifyToAll_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.exc = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public notifyToAll_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public LTTException getExc() {
      return this.exc;
    }

    public notifyToAll_result setExc(LTTException exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((LTTException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyToAll_result)
        return this.equals((notifyToAll_result)that);
      return false;
    }

    public boolean equals(notifyToAll_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(notifyToAll_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      notifyToAll_result typedOther = (notifyToAll_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(typedOther.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, typedOther.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("notifyToAll_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifyToAll_resultStandardSchemeFactory implements SchemeFactory {
      public notifyToAll_resultStandardScheme getScheme() {
        return new notifyToAll_resultStandardScheme();
      }
    }

    private static class notifyToAll_resultStandardScheme extends StandardScheme<notifyToAll_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifyToAll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new LTTException();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifyToAll_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifyToAll_resultTupleSchemeFactory implements SchemeFactory {
      public notifyToAll_resultTupleScheme getScheme() {
        return new notifyToAll_resultTupleScheme();
      }
    }

    private static class notifyToAll_resultTupleScheme extends TupleScheme<notifyToAll_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifyToAll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifyToAll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new LTTException();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class notifyToUser_args implements org.apache.thrift.TBase<notifyToUser_args, notifyToUser_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifyToUser_args");

    private static final org.apache.thrift.protocol.TField MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("mode", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TITLE_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("titleArgs", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField MSG_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("msgArgs", org.apache.thrift.protocol.TType.LIST, (short)6);
    private static final org.apache.thrift.protocol.TField IMAGE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("imageUrl", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField LINK_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("linkUrl", org.apache.thrift.protocol.TType.STRING, (short)8);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new notifyToUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new notifyToUser_argsTupleSchemeFactory());
    }

    public String mode; // required
    public long userId; // required
    public String title; // required
    public List<String> titleArgs; // required
    public String msg; // required
    public List<String> msgArgs; // required
    public String imageUrl; // required
    public String linkUrl; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MODE((short)1, "mode"),
      USER_ID((short)2, "userId"),
      TITLE((short)3, "title"),
      TITLE_ARGS((short)4, "titleArgs"),
      MSG((short)5, "msg"),
      MSG_ARGS((short)6, "msgArgs"),
      IMAGE_URL((short)7, "imageUrl"),
      LINK_URL((short)8, "linkUrl");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODE
            return MODE;
          case 2: // USER_ID
            return USER_ID;
          case 3: // TITLE
            return TITLE;
          case 4: // TITLE_ARGS
            return TITLE_ARGS;
          case 5: // MSG
            return MSG;
          case 6: // MSG_ARGS
            return MSG_ARGS;
          case 7: // IMAGE_URL
            return IMAGE_URL;
          case 8: // LINK_URL
            return LINK_URL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODE, new org.apache.thrift.meta_data.FieldMetaData("mode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "UserId")));
      tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TITLE_ARGS, new org.apache.thrift.meta_data.FieldMetaData("titleArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MSG_ARGS, new org.apache.thrift.meta_data.FieldMetaData("msgArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.IMAGE_URL, new org.apache.thrift.meta_data.FieldMetaData("imageUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LINK_URL, new org.apache.thrift.meta_data.FieldMetaData("linkUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifyToUser_args.class, metaDataMap);
    }

    public notifyToUser_args() {
    }

    public notifyToUser_args(
      String mode,
      long userId,
      String title,
      List<String> titleArgs,
      String msg,
      List<String> msgArgs,
      String imageUrl,
      String linkUrl)
    {
      this();
      this.mode = mode;
      this.userId = userId;
      setUserIdIsSet(true);
      this.title = title;
      this.titleArgs = titleArgs;
      this.msg = msg;
      this.msgArgs = msgArgs;
      this.imageUrl = imageUrl;
      this.linkUrl = linkUrl;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyToUser_args(notifyToUser_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetMode()) {
        this.mode = other.mode;
      }
      this.userId = other.userId;
      if (other.isSetTitle()) {
        this.title = other.title;
      }
      if (other.isSetTitleArgs()) {
        List<String> __this__titleArgs = new ArrayList<String>();
        for (String other_element : other.titleArgs) {
          __this__titleArgs.add(other_element);
        }
        this.titleArgs = __this__titleArgs;
      }
      if (other.isSetMsg()) {
        this.msg = other.msg;
      }
      if (other.isSetMsgArgs()) {
        List<String> __this__msgArgs = new ArrayList<String>();
        for (String other_element : other.msgArgs) {
          __this__msgArgs.add(other_element);
        }
        this.msgArgs = __this__msgArgs;
      }
      if (other.isSetImageUrl()) {
        this.imageUrl = other.imageUrl;
      }
      if (other.isSetLinkUrl()) {
        this.linkUrl = other.linkUrl;
      }
    }

    public notifyToUser_args deepCopy() {
      return new notifyToUser_args(this);
    }

    @Override
    public void clear() {
      this.mode = null;
      setUserIdIsSet(false);
      this.userId = 0;
      this.title = null;
      this.titleArgs = null;
      this.msg = null;
      this.msgArgs = null;
      this.imageUrl = null;
      this.linkUrl = null;
    }

    public String getMode() {
      return this.mode;
    }

    public notifyToUser_args setMode(String mode) {
      this.mode = mode;
      return this;
    }

    public void unsetMode() {
      this.mode = null;
    }

    /** Returns true if field mode is set (has been assigned a value) and false otherwise */
    public boolean isSetMode() {
      return this.mode != null;
    }

    public void setModeIsSet(boolean value) {
      if (!value) {
        this.mode = null;
      }
    }

    public long getUserId() {
      return this.userId;
    }

    public notifyToUser_args setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bit_vector.clear(__USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return __isset_bit_vector.get(__USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bit_vector.set(__USERID_ISSET_ID, value);
    }

    public String getTitle() {
      return this.title;
    }

    public notifyToUser_args setTitle(String title) {
      this.title = title;
      return this;
    }

    public void unsetTitle() {
      this.title = null;
    }

    /** Returns true if field title is set (has been assigned a value) and false otherwise */
    public boolean isSetTitle() {
      return this.title != null;
    }

    public void setTitleIsSet(boolean value) {
      if (!value) {
        this.title = null;
      }
    }

    public int getTitleArgsSize() {
      return (this.titleArgs == null) ? 0 : this.titleArgs.size();
    }

    public java.util.Iterator<String> getTitleArgsIterator() {
      return (this.titleArgs == null) ? null : this.titleArgs.iterator();
    }

    public void addToTitleArgs(String elem) {
      if (this.titleArgs == null) {
        this.titleArgs = new ArrayList<String>();
      }
      this.titleArgs.add(elem);
    }

    public List<String> getTitleArgs() {
      return this.titleArgs;
    }

    public notifyToUser_args setTitleArgs(List<String> titleArgs) {
      this.titleArgs = titleArgs;
      return this;
    }

    public void unsetTitleArgs() {
      this.titleArgs = null;
    }

    /** Returns true if field titleArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetTitleArgs() {
      return this.titleArgs != null;
    }

    public void setTitleArgsIsSet(boolean value) {
      if (!value) {
        this.titleArgs = null;
      }
    }

    public String getMsg() {
      return this.msg;
    }

    public notifyToUser_args setMsg(String msg) {
      this.msg = msg;
      return this;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    public int getMsgArgsSize() {
      return (this.msgArgs == null) ? 0 : this.msgArgs.size();
    }

    public java.util.Iterator<String> getMsgArgsIterator() {
      return (this.msgArgs == null) ? null : this.msgArgs.iterator();
    }

    public void addToMsgArgs(String elem) {
      if (this.msgArgs == null) {
        this.msgArgs = new ArrayList<String>();
      }
      this.msgArgs.add(elem);
    }

    public List<String> getMsgArgs() {
      return this.msgArgs;
    }

    public notifyToUser_args setMsgArgs(List<String> msgArgs) {
      this.msgArgs = msgArgs;
      return this;
    }

    public void unsetMsgArgs() {
      this.msgArgs = null;
    }

    /** Returns true if field msgArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetMsgArgs() {
      return this.msgArgs != null;
    }

    public void setMsgArgsIsSet(boolean value) {
      if (!value) {
        this.msgArgs = null;
      }
    }

    public String getImageUrl() {
      return this.imageUrl;
    }

    public notifyToUser_args setImageUrl(String imageUrl) {
      this.imageUrl = imageUrl;
      return this;
    }

    public void unsetImageUrl() {
      this.imageUrl = null;
    }

    /** Returns true if field imageUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetImageUrl() {
      return this.imageUrl != null;
    }

    public void setImageUrlIsSet(boolean value) {
      if (!value) {
        this.imageUrl = null;
      }
    }

    public String getLinkUrl() {
      return this.linkUrl;
    }

    public notifyToUser_args setLinkUrl(String linkUrl) {
      this.linkUrl = linkUrl;
      return this;
    }

    public void unsetLinkUrl() {
      this.linkUrl = null;
    }

    /** Returns true if field linkUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetLinkUrl() {
      return this.linkUrl != null;
    }

    public void setLinkUrlIsSet(boolean value) {
      if (!value) {
        this.linkUrl = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MODE:
        if (value == null) {
          unsetMode();
        } else {
          setMode((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Long)value);
        }
        break;

      case TITLE:
        if (value == null) {
          unsetTitle();
        } else {
          setTitle((String)value);
        }
        break;

      case TITLE_ARGS:
        if (value == null) {
          unsetTitleArgs();
        } else {
          setTitleArgs((List<String>)value);
        }
        break;

      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          setMsg((String)value);
        }
        break;

      case MSG_ARGS:
        if (value == null) {
          unsetMsgArgs();
        } else {
          setMsgArgs((List<String>)value);
        }
        break;

      case IMAGE_URL:
        if (value == null) {
          unsetImageUrl();
        } else {
          setImageUrl((String)value);
        }
        break;

      case LINK_URL:
        if (value == null) {
          unsetLinkUrl();
        } else {
          setLinkUrl((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MODE:
        return getMode();

      case USER_ID:
        return Long.valueOf(getUserId());

      case TITLE:
        return getTitle();

      case TITLE_ARGS:
        return getTitleArgs();

      case MSG:
        return getMsg();

      case MSG_ARGS:
        return getMsgArgs();

      case IMAGE_URL:
        return getImageUrl();

      case LINK_URL:
        return getLinkUrl();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MODE:
        return isSetMode();
      case USER_ID:
        return isSetUserId();
      case TITLE:
        return isSetTitle();
      case TITLE_ARGS:
        return isSetTitleArgs();
      case MSG:
        return isSetMsg();
      case MSG_ARGS:
        return isSetMsgArgs();
      case IMAGE_URL:
        return isSetImageUrl();
      case LINK_URL:
        return isSetLinkUrl();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyToUser_args)
        return this.equals((notifyToUser_args)that);
      return false;
    }

    public boolean equals(notifyToUser_args that) {
      if (that == null)
        return false;

      boolean this_present_mode = true && this.isSetMode();
      boolean that_present_mode = true && that.isSetMode();
      if (this_present_mode || that_present_mode) {
        if (!(this_present_mode && that_present_mode))
          return false;
        if (!this.mode.equals(that.mode))
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_title = true && this.isSetTitle();
      boolean that_present_title = true && that.isSetTitle();
      if (this_present_title || that_present_title) {
        if (!(this_present_title && that_present_title))
          return false;
        if (!this.title.equals(that.title))
          return false;
      }

      boolean this_present_titleArgs = true && this.isSetTitleArgs();
      boolean that_present_titleArgs = true && that.isSetTitleArgs();
      if (this_present_titleArgs || that_present_titleArgs) {
        if (!(this_present_titleArgs && that_present_titleArgs))
          return false;
        if (!this.titleArgs.equals(that.titleArgs))
          return false;
      }

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      boolean this_present_msgArgs = true && this.isSetMsgArgs();
      boolean that_present_msgArgs = true && that.isSetMsgArgs();
      if (this_present_msgArgs || that_present_msgArgs) {
        if (!(this_present_msgArgs && that_present_msgArgs))
          return false;
        if (!this.msgArgs.equals(that.msgArgs))
          return false;
      }

      boolean this_present_imageUrl = true && this.isSetImageUrl();
      boolean that_present_imageUrl = true && that.isSetImageUrl();
      if (this_present_imageUrl || that_present_imageUrl) {
        if (!(this_present_imageUrl && that_present_imageUrl))
          return false;
        if (!this.imageUrl.equals(that.imageUrl))
          return false;
      }

      boolean this_present_linkUrl = true && this.isSetLinkUrl();
      boolean that_present_linkUrl = true && that.isSetLinkUrl();
      if (this_present_linkUrl || that_present_linkUrl) {
        if (!(this_present_linkUrl && that_present_linkUrl))
          return false;
        if (!this.linkUrl.equals(that.linkUrl))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(notifyToUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      notifyToUser_args typedOther = (notifyToUser_args)other;

      lastComparison = Boolean.valueOf(isSetMode()).compareTo(typedOther.isSetMode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mode, typedOther.mode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTitle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, typedOther.title);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTitleArgs()).compareTo(typedOther.isSetTitleArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTitleArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.titleArgs, typedOther.titleArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMsg()).compareTo(typedOther.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, typedOther.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMsgArgs()).compareTo(typedOther.isSetMsgArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsgArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgArgs, typedOther.msgArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetImageUrl()).compareTo(typedOther.isSetImageUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImageUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageUrl, typedOther.imageUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLinkUrl()).compareTo(typedOther.isSetLinkUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLinkUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkUrl, typedOther.linkUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("notifyToUser_args(");
      boolean first = true;

      sb.append("mode:");
      if (this.mode == null) {
        sb.append("null");
      } else {
        sb.append(this.mode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("titleArgs:");
      if (this.titleArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.titleArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("msgArgs:");
      if (this.msgArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.msgArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("imageUrl:");
      if (this.imageUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.imageUrl);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("linkUrl:");
      if (this.linkUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.linkUrl);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifyToUser_argsStandardSchemeFactory implements SchemeFactory {
      public notifyToUser_argsStandardScheme getScheme() {
        return new notifyToUser_argsStandardScheme();
      }
    }

    private static class notifyToUser_argsStandardScheme extends StandardScheme<notifyToUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifyToUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mode = iprot.readString();
                struct.setModeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userId = iprot.readI64();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TITLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.title = iprot.readString();
                struct.setTitleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TITLE_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.titleArgs = new ArrayList<String>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    String _elem18; // required
                    _elem18 = iprot.readString();
                    struct.titleArgs.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setTitleArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.msg = iprot.readString();
                struct.setMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // MSG_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                  struct.msgArgs = new ArrayList<String>(_list19.size);
                  for (int _i20 = 0; _i20 < _list19.size; ++_i20)
                  {
                    String _elem21; // required
                    _elem21 = iprot.readString();
                    struct.msgArgs.add(_elem21);
                  }
                  iprot.readListEnd();
                }
                struct.setMsgArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // IMAGE_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.imageUrl = iprot.readString();
                struct.setImageUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // LINK_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.linkUrl = iprot.readString();
                struct.setLinkUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifyToUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mode != null) {
          oprot.writeFieldBegin(MODE_FIELD_DESC);
          oprot.writeString(struct.mode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
        if (struct.title != null) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
        if (struct.titleArgs != null) {
          oprot.writeFieldBegin(TITLE_ARGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.titleArgs.size()));
            for (String _iter22 : struct.titleArgs)
            {
              oprot.writeString(_iter22);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.msg != null) {
          oprot.writeFieldBegin(MSG_FIELD_DESC);
          oprot.writeString(struct.msg);
          oprot.writeFieldEnd();
        }
        if (struct.msgArgs != null) {
          oprot.writeFieldBegin(MSG_ARGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.msgArgs.size()));
            for (String _iter23 : struct.msgArgs)
            {
              oprot.writeString(_iter23);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.imageUrl != null) {
          oprot.writeFieldBegin(IMAGE_URL_FIELD_DESC);
          oprot.writeString(struct.imageUrl);
          oprot.writeFieldEnd();
        }
        if (struct.linkUrl != null) {
          oprot.writeFieldBegin(LINK_URL_FIELD_DESC);
          oprot.writeString(struct.linkUrl);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifyToUser_argsTupleSchemeFactory implements SchemeFactory {
      public notifyToUser_argsTupleScheme getScheme() {
        return new notifyToUser_argsTupleScheme();
      }
    }

    private static class notifyToUser_argsTupleScheme extends TupleScheme<notifyToUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifyToUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMode()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        if (struct.isSetTitle()) {
          optionals.set(2);
        }
        if (struct.isSetTitleArgs()) {
          optionals.set(3);
        }
        if (struct.isSetMsg()) {
          optionals.set(4);
        }
        if (struct.isSetMsgArgs()) {
          optionals.set(5);
        }
        if (struct.isSetImageUrl()) {
          optionals.set(6);
        }
        if (struct.isSetLinkUrl()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetMode()) {
          oprot.writeString(struct.mode);
        }
        if (struct.isSetUserId()) {
          oprot.writeI64(struct.userId);
        }
        if (struct.isSetTitle()) {
          oprot.writeString(struct.title);
        }
        if (struct.isSetTitleArgs()) {
          {
            oprot.writeI32(struct.titleArgs.size());
            for (String _iter24 : struct.titleArgs)
            {
              oprot.writeString(_iter24);
            }
          }
        }
        if (struct.isSetMsg()) {
          oprot.writeString(struct.msg);
        }
        if (struct.isSetMsgArgs()) {
          {
            oprot.writeI32(struct.msgArgs.size());
            for (String _iter25 : struct.msgArgs)
            {
              oprot.writeString(_iter25);
            }
          }
        }
        if (struct.isSetImageUrl()) {
          oprot.writeString(struct.imageUrl);
        }
        if (struct.isSetLinkUrl()) {
          oprot.writeString(struct.linkUrl);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifyToUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          struct.mode = iprot.readString();
          struct.setModeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readI64();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.title = iprot.readString();
          struct.setTitleIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.titleArgs = new ArrayList<String>(_list26.size);
            for (int _i27 = 0; _i27 < _list26.size; ++_i27)
            {
              String _elem28; // required
              _elem28 = iprot.readString();
              struct.titleArgs.add(_elem28);
            }
          }
          struct.setTitleArgsIsSet(true);
        }
        if (incoming.get(4)) {
          struct.msg = iprot.readString();
          struct.setMsgIsSet(true);
        }
        if (incoming.get(5)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.msgArgs = new ArrayList<String>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              String _elem31; // required
              _elem31 = iprot.readString();
              struct.msgArgs.add(_elem31);
            }
          }
          struct.setMsgArgsIsSet(true);
        }
        if (incoming.get(6)) {
          struct.imageUrl = iprot.readString();
          struct.setImageUrlIsSet(true);
        }
        if (incoming.get(7)) {
          struct.linkUrl = iprot.readString();
          struct.setLinkUrlIsSet(true);
        }
      }
    }

  }

  public static class notifyToUser_result implements org.apache.thrift.TBase<notifyToUser_result, notifyToUser_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifyToUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UDEE_FIELD_DESC = new org.apache.thrift.protocol.TField("udee", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new notifyToUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new notifyToUser_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public LTTException exc; // required
    public UserDontExistException udee; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc"),
      UDEE((short)2, "udee");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          case 2: // UDEE
            return UDEE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UDEE, new org.apache.thrift.meta_data.FieldMetaData("udee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifyToUser_result.class, metaDataMap);
    }

    public notifyToUser_result() {
    }

    public notifyToUser_result(
      boolean success,
      LTTException exc,
      UserDontExistException udee)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.exc = exc;
      this.udee = udee;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyToUser_result(notifyToUser_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetExc()) {
        this.exc = new LTTException(other.exc);
      }
      if (other.isSetUdee()) {
        this.udee = new UserDontExistException(other.udee);
      }
    }

    public notifyToUser_result deepCopy() {
      return new notifyToUser_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.exc = null;
      this.udee = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public notifyToUser_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public LTTException getExc() {
      return this.exc;
    }

    public notifyToUser_result setExc(LTTException exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public UserDontExistException getUdee() {
      return this.udee;
    }

    public notifyToUser_result setUdee(UserDontExistException udee) {
      this.udee = udee;
      return this;
    }

    public void unsetUdee() {
      this.udee = null;
    }

    /** Returns true if field udee is set (has been assigned a value) and false otherwise */
    public boolean isSetUdee() {
      return this.udee != null;
    }

    public void setUdeeIsSet(boolean value) {
      if (!value) {
        this.udee = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((LTTException)value);
        }
        break;

      case UDEE:
        if (value == null) {
          unsetUdee();
        } else {
          setUdee((UserDontExistException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case EXC:
        return getExc();

      case UDEE:
        return getUdee();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      case UDEE:
        return isSetUdee();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyToUser_result)
        return this.equals((notifyToUser_result)that);
      return false;
    }

    public boolean equals(notifyToUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      boolean this_present_udee = true && this.isSetUdee();
      boolean that_present_udee = true && that.isSetUdee();
      if (this_present_udee || that_present_udee) {
        if (!(this_present_udee && that_present_udee))
          return false;
        if (!this.udee.equals(that.udee))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(notifyToUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      notifyToUser_result typedOther = (notifyToUser_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(typedOther.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, typedOther.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUdee()).compareTo(typedOther.isSetUdee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUdee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.udee, typedOther.udee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("notifyToUser_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("udee:");
      if (this.udee == null) {
        sb.append("null");
      } else {
        sb.append(this.udee);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifyToUser_resultStandardSchemeFactory implements SchemeFactory {
      public notifyToUser_resultStandardScheme getScheme() {
        return new notifyToUser_resultStandardScheme();
      }
    }

    private static class notifyToUser_resultStandardScheme extends StandardScheme<notifyToUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifyToUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new LTTException();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UDEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.udee = new UserDontExistException();
                struct.udee.read(iprot);
                struct.setUdeeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifyToUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.udee != null) {
          oprot.writeFieldBegin(UDEE_FIELD_DESC);
          struct.udee.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifyToUser_resultTupleSchemeFactory implements SchemeFactory {
      public notifyToUser_resultTupleScheme getScheme() {
        return new notifyToUser_resultTupleScheme();
      }
    }

    private static class notifyToUser_resultTupleScheme extends TupleScheme<notifyToUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifyToUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        if (struct.isSetUdee()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
        if (struct.isSetUdee()) {
          struct.udee.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifyToUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new LTTException();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
        if (incoming.get(2)) {
          struct.udee = new UserDontExistException();
          struct.udee.read(iprot);
          struct.setUdeeIsSet(true);
        }
      }
    }

  }

  public static class notifyToRoom_args implements org.apache.thrift.TBase<notifyToRoom_args, notifyToRoom_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifyToRoom_args");

    private static final org.apache.thrift.protocol.TField MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("mode", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ROOM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("roomName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField IMAGE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("imageUrl", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField LINK_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("linkUrl", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new notifyToRoom_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new notifyToRoom_argsTupleSchemeFactory());
    }

    public String mode; // required
    public String roomName; // required
    public String title; // required
    public String msg; // required
    public String imageUrl; // required
    public String linkUrl; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MODE((short)1, "mode"),
      ROOM_NAME((short)2, "roomName"),
      TITLE((short)3, "title"),
      MSG((short)4, "msg"),
      IMAGE_URL((short)5, "imageUrl"),
      LINK_URL((short)6, "linkUrl");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODE
            return MODE;
          case 2: // ROOM_NAME
            return ROOM_NAME;
          case 3: // TITLE
            return TITLE;
          case 4: // MSG
            return MSG;
          case 5: // IMAGE_URL
            return IMAGE_URL;
          case 6: // LINK_URL
            return LINK_URL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODE, new org.apache.thrift.meta_data.FieldMetaData("mode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ROOM_NAME, new org.apache.thrift.meta_data.FieldMetaData("roomName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "RoomName")));
      tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IMAGE_URL, new org.apache.thrift.meta_data.FieldMetaData("imageUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LINK_URL, new org.apache.thrift.meta_data.FieldMetaData("linkUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifyToRoom_args.class, metaDataMap);
    }

    public notifyToRoom_args() {
    }

    public notifyToRoom_args(
      String mode,
      String roomName,
      String title,
      String msg,
      String imageUrl,
      String linkUrl)
    {
      this();
      this.mode = mode;
      this.roomName = roomName;
      this.title = title;
      this.msg = msg;
      this.imageUrl = imageUrl;
      this.linkUrl = linkUrl;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyToRoom_args(notifyToRoom_args other) {
      if (other.isSetMode()) {
        this.mode = other.mode;
      }
      if (other.isSetRoomName()) {
        this.roomName = other.roomName;
      }
      if (other.isSetTitle()) {
        this.title = other.title;
      }
      if (other.isSetMsg()) {
        this.msg = other.msg;
      }
      if (other.isSetImageUrl()) {
        this.imageUrl = other.imageUrl;
      }
      if (other.isSetLinkUrl()) {
        this.linkUrl = other.linkUrl;
      }
    }

    public notifyToRoom_args deepCopy() {
      return new notifyToRoom_args(this);
    }

    @Override
    public void clear() {
      this.mode = null;
      this.roomName = null;
      this.title = null;
      this.msg = null;
      this.imageUrl = null;
      this.linkUrl = null;
    }

    public String getMode() {
      return this.mode;
    }

    public notifyToRoom_args setMode(String mode) {
      this.mode = mode;
      return this;
    }

    public void unsetMode() {
      this.mode = null;
    }

    /** Returns true if field mode is set (has been assigned a value) and false otherwise */
    public boolean isSetMode() {
      return this.mode != null;
    }

    public void setModeIsSet(boolean value) {
      if (!value) {
        this.mode = null;
      }
    }

    public String getRoomName() {
      return this.roomName;
    }

    public notifyToRoom_args setRoomName(String roomName) {
      this.roomName = roomName;
      return this;
    }

    public void unsetRoomName() {
      this.roomName = null;
    }

    /** Returns true if field roomName is set (has been assigned a value) and false otherwise */
    public boolean isSetRoomName() {
      return this.roomName != null;
    }

    public void setRoomNameIsSet(boolean value) {
      if (!value) {
        this.roomName = null;
      }
    }

    public String getTitle() {
      return this.title;
    }

    public notifyToRoom_args setTitle(String title) {
      this.title = title;
      return this;
    }

    public void unsetTitle() {
      this.title = null;
    }

    /** Returns true if field title is set (has been assigned a value) and false otherwise */
    public boolean isSetTitle() {
      return this.title != null;
    }

    public void setTitleIsSet(boolean value) {
      if (!value) {
        this.title = null;
      }
    }

    public String getMsg() {
      return this.msg;
    }

    public notifyToRoom_args setMsg(String msg) {
      this.msg = msg;
      return this;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    public String getImageUrl() {
      return this.imageUrl;
    }

    public notifyToRoom_args setImageUrl(String imageUrl) {
      this.imageUrl = imageUrl;
      return this;
    }

    public void unsetImageUrl() {
      this.imageUrl = null;
    }

    /** Returns true if field imageUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetImageUrl() {
      return this.imageUrl != null;
    }

    public void setImageUrlIsSet(boolean value) {
      if (!value) {
        this.imageUrl = null;
      }
    }

    public String getLinkUrl() {
      return this.linkUrl;
    }

    public notifyToRoom_args setLinkUrl(String linkUrl) {
      this.linkUrl = linkUrl;
      return this;
    }

    public void unsetLinkUrl() {
      this.linkUrl = null;
    }

    /** Returns true if field linkUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetLinkUrl() {
      return this.linkUrl != null;
    }

    public void setLinkUrlIsSet(boolean value) {
      if (!value) {
        this.linkUrl = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MODE:
        if (value == null) {
          unsetMode();
        } else {
          setMode((String)value);
        }
        break;

      case ROOM_NAME:
        if (value == null) {
          unsetRoomName();
        } else {
          setRoomName((String)value);
        }
        break;

      case TITLE:
        if (value == null) {
          unsetTitle();
        } else {
          setTitle((String)value);
        }
        break;

      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          setMsg((String)value);
        }
        break;

      case IMAGE_URL:
        if (value == null) {
          unsetImageUrl();
        } else {
          setImageUrl((String)value);
        }
        break;

      case LINK_URL:
        if (value == null) {
          unsetLinkUrl();
        } else {
          setLinkUrl((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MODE:
        return getMode();

      case ROOM_NAME:
        return getRoomName();

      case TITLE:
        return getTitle();

      case MSG:
        return getMsg();

      case IMAGE_URL:
        return getImageUrl();

      case LINK_URL:
        return getLinkUrl();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MODE:
        return isSetMode();
      case ROOM_NAME:
        return isSetRoomName();
      case TITLE:
        return isSetTitle();
      case MSG:
        return isSetMsg();
      case IMAGE_URL:
        return isSetImageUrl();
      case LINK_URL:
        return isSetLinkUrl();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyToRoom_args)
        return this.equals((notifyToRoom_args)that);
      return false;
    }

    public boolean equals(notifyToRoom_args that) {
      if (that == null)
        return false;

      boolean this_present_mode = true && this.isSetMode();
      boolean that_present_mode = true && that.isSetMode();
      if (this_present_mode || that_present_mode) {
        if (!(this_present_mode && that_present_mode))
          return false;
        if (!this.mode.equals(that.mode))
          return false;
      }

      boolean this_present_roomName = true && this.isSetRoomName();
      boolean that_present_roomName = true && that.isSetRoomName();
      if (this_present_roomName || that_present_roomName) {
        if (!(this_present_roomName && that_present_roomName))
          return false;
        if (!this.roomName.equals(that.roomName))
          return false;
      }

      boolean this_present_title = true && this.isSetTitle();
      boolean that_present_title = true && that.isSetTitle();
      if (this_present_title || that_present_title) {
        if (!(this_present_title && that_present_title))
          return false;
        if (!this.title.equals(that.title))
          return false;
      }

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      boolean this_present_imageUrl = true && this.isSetImageUrl();
      boolean that_present_imageUrl = true && that.isSetImageUrl();
      if (this_present_imageUrl || that_present_imageUrl) {
        if (!(this_present_imageUrl && that_present_imageUrl))
          return false;
        if (!this.imageUrl.equals(that.imageUrl))
          return false;
      }

      boolean this_present_linkUrl = true && this.isSetLinkUrl();
      boolean that_present_linkUrl = true && that.isSetLinkUrl();
      if (this_present_linkUrl || that_present_linkUrl) {
        if (!(this_present_linkUrl && that_present_linkUrl))
          return false;
        if (!this.linkUrl.equals(that.linkUrl))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(notifyToRoom_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      notifyToRoom_args typedOther = (notifyToRoom_args)other;

      lastComparison = Boolean.valueOf(isSetMode()).compareTo(typedOther.isSetMode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mode, typedOther.mode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRoomName()).compareTo(typedOther.isSetRoomName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoomName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomName, typedOther.roomName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTitle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, typedOther.title);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMsg()).compareTo(typedOther.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, typedOther.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetImageUrl()).compareTo(typedOther.isSetImageUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImageUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageUrl, typedOther.imageUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLinkUrl()).compareTo(typedOther.isSetLinkUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLinkUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkUrl, typedOther.linkUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("notifyToRoom_args(");
      boolean first = true;

      sb.append("mode:");
      if (this.mode == null) {
        sb.append("null");
      } else {
        sb.append(this.mode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("roomName:");
      if (this.roomName == null) {
        sb.append("null");
      } else {
        sb.append(this.roomName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("imageUrl:");
      if (this.imageUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.imageUrl);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("linkUrl:");
      if (this.linkUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.linkUrl);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifyToRoom_argsStandardSchemeFactory implements SchemeFactory {
      public notifyToRoom_argsStandardScheme getScheme() {
        return new notifyToRoom_argsStandardScheme();
      }
    }

    private static class notifyToRoom_argsStandardScheme extends StandardScheme<notifyToRoom_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifyToRoom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mode = iprot.readString();
                struct.setModeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ROOM_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.roomName = iprot.readString();
                struct.setRoomNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TITLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.title = iprot.readString();
                struct.setTitleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.msg = iprot.readString();
                struct.setMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // IMAGE_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.imageUrl = iprot.readString();
                struct.setImageUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // LINK_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.linkUrl = iprot.readString();
                struct.setLinkUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifyToRoom_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mode != null) {
          oprot.writeFieldBegin(MODE_FIELD_DESC);
          oprot.writeString(struct.mode);
          oprot.writeFieldEnd();
        }
        if (struct.roomName != null) {
          oprot.writeFieldBegin(ROOM_NAME_FIELD_DESC);
          oprot.writeString(struct.roomName);
          oprot.writeFieldEnd();
        }
        if (struct.title != null) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
        if (struct.msg != null) {
          oprot.writeFieldBegin(MSG_FIELD_DESC);
          oprot.writeString(struct.msg);
          oprot.writeFieldEnd();
        }
        if (struct.imageUrl != null) {
          oprot.writeFieldBegin(IMAGE_URL_FIELD_DESC);
          oprot.writeString(struct.imageUrl);
          oprot.writeFieldEnd();
        }
        if (struct.linkUrl != null) {
          oprot.writeFieldBegin(LINK_URL_FIELD_DESC);
          oprot.writeString(struct.linkUrl);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifyToRoom_argsTupleSchemeFactory implements SchemeFactory {
      public notifyToRoom_argsTupleScheme getScheme() {
        return new notifyToRoom_argsTupleScheme();
      }
    }

    private static class notifyToRoom_argsTupleScheme extends TupleScheme<notifyToRoom_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifyToRoom_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMode()) {
          optionals.set(0);
        }
        if (struct.isSetRoomName()) {
          optionals.set(1);
        }
        if (struct.isSetTitle()) {
          optionals.set(2);
        }
        if (struct.isSetMsg()) {
          optionals.set(3);
        }
        if (struct.isSetImageUrl()) {
          optionals.set(4);
        }
        if (struct.isSetLinkUrl()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetMode()) {
          oprot.writeString(struct.mode);
        }
        if (struct.isSetRoomName()) {
          oprot.writeString(struct.roomName);
        }
        if (struct.isSetTitle()) {
          oprot.writeString(struct.title);
        }
        if (struct.isSetMsg()) {
          oprot.writeString(struct.msg);
        }
        if (struct.isSetImageUrl()) {
          oprot.writeString(struct.imageUrl);
        }
        if (struct.isSetLinkUrl()) {
          oprot.writeString(struct.linkUrl);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifyToRoom_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.mode = iprot.readString();
          struct.setModeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.roomName = iprot.readString();
          struct.setRoomNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.title = iprot.readString();
          struct.setTitleIsSet(true);
        }
        if (incoming.get(3)) {
          struct.msg = iprot.readString();
          struct.setMsgIsSet(true);
        }
        if (incoming.get(4)) {
          struct.imageUrl = iprot.readString();
          struct.setImageUrlIsSet(true);
        }
        if (incoming.get(5)) {
          struct.linkUrl = iprot.readString();
          struct.setLinkUrlIsSet(true);
        }
      }
    }

  }

  public static class notifyToRoom_result implements org.apache.thrift.TBase<notifyToRoom_result, notifyToRoom_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifyToRoom_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RNDE_FIELD_DESC = new org.apache.thrift.protocol.TField("rnde", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new notifyToRoom_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new notifyToRoom_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public LTTException exc; // required
    public RoomNameDontExistException rnde; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc"),
      RNDE((short)2, "rnde");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          case 2: // RNDE
            return RNDE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RNDE, new org.apache.thrift.meta_data.FieldMetaData("rnde", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifyToRoom_result.class, metaDataMap);
    }

    public notifyToRoom_result() {
    }

    public notifyToRoom_result(
      boolean success,
      LTTException exc,
      RoomNameDontExistException rnde)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.exc = exc;
      this.rnde = rnde;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyToRoom_result(notifyToRoom_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetExc()) {
        this.exc = new LTTException(other.exc);
      }
      if (other.isSetRnde()) {
        this.rnde = new RoomNameDontExistException(other.rnde);
      }
    }

    public notifyToRoom_result deepCopy() {
      return new notifyToRoom_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.exc = null;
      this.rnde = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public notifyToRoom_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public LTTException getExc() {
      return this.exc;
    }

    public notifyToRoom_result setExc(LTTException exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public RoomNameDontExistException getRnde() {
      return this.rnde;
    }

    public notifyToRoom_result setRnde(RoomNameDontExistException rnde) {
      this.rnde = rnde;
      return this;
    }

    public void unsetRnde() {
      this.rnde = null;
    }

    /** Returns true if field rnde is set (has been assigned a value) and false otherwise */
    public boolean isSetRnde() {
      return this.rnde != null;
    }

    public void setRndeIsSet(boolean value) {
      if (!value) {
        this.rnde = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((LTTException)value);
        }
        break;

      case RNDE:
        if (value == null) {
          unsetRnde();
        } else {
          setRnde((RoomNameDontExistException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case EXC:
        return getExc();

      case RNDE:
        return getRnde();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      case RNDE:
        return isSetRnde();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyToRoom_result)
        return this.equals((notifyToRoom_result)that);
      return false;
    }

    public boolean equals(notifyToRoom_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      boolean this_present_rnde = true && this.isSetRnde();
      boolean that_present_rnde = true && that.isSetRnde();
      if (this_present_rnde || that_present_rnde) {
        if (!(this_present_rnde && that_present_rnde))
          return false;
        if (!this.rnde.equals(that.rnde))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(notifyToRoom_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      notifyToRoom_result typedOther = (notifyToRoom_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(typedOther.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, typedOther.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRnde()).compareTo(typedOther.isSetRnde());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRnde()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rnde, typedOther.rnde);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("notifyToRoom_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rnde:");
      if (this.rnde == null) {
        sb.append("null");
      } else {
        sb.append(this.rnde);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifyToRoom_resultStandardSchemeFactory implements SchemeFactory {
      public notifyToRoom_resultStandardScheme getScheme() {
        return new notifyToRoom_resultStandardScheme();
      }
    }

    private static class notifyToRoom_resultStandardScheme extends StandardScheme<notifyToRoom_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifyToRoom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new LTTException();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RNDE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rnde = new RoomNameDontExistException();
                struct.rnde.read(iprot);
                struct.setRndeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifyToRoom_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.rnde != null) {
          oprot.writeFieldBegin(RNDE_FIELD_DESC);
          struct.rnde.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifyToRoom_resultTupleSchemeFactory implements SchemeFactory {
      public notifyToRoom_resultTupleScheme getScheme() {
        return new notifyToRoom_resultTupleScheme();
      }
    }

    private static class notifyToRoom_resultTupleScheme extends TupleScheme<notifyToRoom_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifyToRoom_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        if (struct.isSetRnde()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
        if (struct.isSetRnde()) {
          struct.rnde.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifyToRoom_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new LTTException();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
        if (incoming.get(2)) {
          struct.rnde = new RoomNameDontExistException();
          struct.rnde.read(iprot);
          struct.setRndeIsSet(true);
        }
      }
    }

  }

  public static class mutePlayer_args implements org.apache.thrift.TBase<mutePlayer_args, mutePlayer_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mutePlayer_args");

    private static final org.apache.thrift.protocol.TField PLAYER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("playerId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("duration", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new mutePlayer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new mutePlayer_argsTupleSchemeFactory());
    }

    public long playerId; // required
    public long duration; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLAYER_ID((short)1, "playerId"),
      DURATION((short)2, "duration");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLAYER_ID
            return PLAYER_ID;
          case 2: // DURATION
            return DURATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PLAYERID_ISSET_ID = 0;
    private static final int __DURATION_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLAYER_ID, new org.apache.thrift.meta_data.FieldMetaData("playerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "UserId")));
      tmpMap.put(_Fields.DURATION, new org.apache.thrift.meta_data.FieldMetaData("duration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mutePlayer_args.class, metaDataMap);
    }

    public mutePlayer_args() {
    }

    public mutePlayer_args(
      long playerId,
      long duration)
    {
      this();
      this.playerId = playerId;
      setPlayerIdIsSet(true);
      this.duration = duration;
      setDurationIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mutePlayer_args(mutePlayer_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.playerId = other.playerId;
      this.duration = other.duration;
    }

    public mutePlayer_args deepCopy() {
      return new mutePlayer_args(this);
    }

    @Override
    public void clear() {
      setPlayerIdIsSet(false);
      this.playerId = 0;
      setDurationIsSet(false);
      this.duration = 0;
    }

    public long getPlayerId() {
      return this.playerId;
    }

    public mutePlayer_args setPlayerId(long playerId) {
      this.playerId = playerId;
      setPlayerIdIsSet(true);
      return this;
    }

    public void unsetPlayerId() {
      __isset_bit_vector.clear(__PLAYERID_ISSET_ID);
    }

    /** Returns true if field playerId is set (has been assigned a value) and false otherwise */
    public boolean isSetPlayerId() {
      return __isset_bit_vector.get(__PLAYERID_ISSET_ID);
    }

    public void setPlayerIdIsSet(boolean value) {
      __isset_bit_vector.set(__PLAYERID_ISSET_ID, value);
    }

    public long getDuration() {
      return this.duration;
    }

    public mutePlayer_args setDuration(long duration) {
      this.duration = duration;
      setDurationIsSet(true);
      return this;
    }

    public void unsetDuration() {
      __isset_bit_vector.clear(__DURATION_ISSET_ID);
    }

    /** Returns true if field duration is set (has been assigned a value) and false otherwise */
    public boolean isSetDuration() {
      return __isset_bit_vector.get(__DURATION_ISSET_ID);
    }

    public void setDurationIsSet(boolean value) {
      __isset_bit_vector.set(__DURATION_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLAYER_ID:
        if (value == null) {
          unsetPlayerId();
        } else {
          setPlayerId((Long)value);
        }
        break;

      case DURATION:
        if (value == null) {
          unsetDuration();
        } else {
          setDuration((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLAYER_ID:
        return Long.valueOf(getPlayerId());

      case DURATION:
        return Long.valueOf(getDuration());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLAYER_ID:
        return isSetPlayerId();
      case DURATION:
        return isSetDuration();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mutePlayer_args)
        return this.equals((mutePlayer_args)that);
      return false;
    }

    public boolean equals(mutePlayer_args that) {
      if (that == null)
        return false;

      boolean this_present_playerId = true;
      boolean that_present_playerId = true;
      if (this_present_playerId || that_present_playerId) {
        if (!(this_present_playerId && that_present_playerId))
          return false;
        if (this.playerId != that.playerId)
          return false;
      }

      boolean this_present_duration = true;
      boolean that_present_duration = true;
      if (this_present_duration || that_present_duration) {
        if (!(this_present_duration && that_present_duration))
          return false;
        if (this.duration != that.duration)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(mutePlayer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      mutePlayer_args typedOther = (mutePlayer_args)other;

      lastComparison = Boolean.valueOf(isSetPlayerId()).compareTo(typedOther.isSetPlayerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlayerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playerId, typedOther.playerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDuration()).compareTo(typedOther.isSetDuration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDuration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.duration, typedOther.duration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mutePlayer_args(");
      boolean first = true;

      sb.append("playerId:");
      sb.append(this.playerId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("duration:");
      sb.append(this.duration);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mutePlayer_argsStandardSchemeFactory implements SchemeFactory {
      public mutePlayer_argsStandardScheme getScheme() {
        return new mutePlayer_argsStandardScheme();
      }
    }

    private static class mutePlayer_argsStandardScheme extends StandardScheme<mutePlayer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mutePlayer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLAYER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.playerId = iprot.readI64();
                struct.setPlayerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.duration = iprot.readI64();
                struct.setDurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mutePlayer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PLAYER_ID_FIELD_DESC);
        oprot.writeI64(struct.playerId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(DURATION_FIELD_DESC);
        oprot.writeI64(struct.duration);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mutePlayer_argsTupleSchemeFactory implements SchemeFactory {
      public mutePlayer_argsTupleScheme getScheme() {
        return new mutePlayer_argsTupleScheme();
      }
    }

    private static class mutePlayer_argsTupleScheme extends TupleScheme<mutePlayer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mutePlayer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlayerId()) {
          optionals.set(0);
        }
        if (struct.isSetDuration()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPlayerId()) {
          oprot.writeI64(struct.playerId);
        }
        if (struct.isSetDuration()) {
          oprot.writeI64(struct.duration);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mutePlayer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.playerId = iprot.readI64();
          struct.setPlayerIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.duration = iprot.readI64();
          struct.setDurationIsSet(true);
        }
      }
    }

  }

  public static class mutePlayer_result implements org.apache.thrift.TBase<mutePlayer_result, mutePlayer_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mutePlayer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new mutePlayer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new mutePlayer_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public LTTException exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mutePlayer_result.class, metaDataMap);
    }

    public mutePlayer_result() {
    }

    public mutePlayer_result(
      boolean success,
      LTTException exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mutePlayer_result(mutePlayer_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetExc()) {
        this.exc = new LTTException(other.exc);
      }
    }

    public mutePlayer_result deepCopy() {
      return new mutePlayer_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.exc = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public mutePlayer_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public LTTException getExc() {
      return this.exc;
    }

    public mutePlayer_result setExc(LTTException exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((LTTException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mutePlayer_result)
        return this.equals((mutePlayer_result)that);
      return false;
    }

    public boolean equals(mutePlayer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(mutePlayer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      mutePlayer_result typedOther = (mutePlayer_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(typedOther.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, typedOther.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mutePlayer_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mutePlayer_resultStandardSchemeFactory implements SchemeFactory {
      public mutePlayer_resultStandardScheme getScheme() {
        return new mutePlayer_resultStandardScheme();
      }
    }

    private static class mutePlayer_resultStandardScheme extends StandardScheme<mutePlayer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mutePlayer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new LTTException();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mutePlayer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mutePlayer_resultTupleSchemeFactory implements SchemeFactory {
      public mutePlayer_resultTupleScheme getScheme() {
        return new mutePlayer_resultTupleScheme();
      }
    }

    private static class mutePlayer_resultTupleScheme extends TupleScheme<mutePlayer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mutePlayer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mutePlayer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new LTTException();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class unmutePlayer_args implements org.apache.thrift.TBase<unmutePlayer_args, unmutePlayer_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unmutePlayer_args");

    private static final org.apache.thrift.protocol.TField PLAYER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("playerId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unmutePlayer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unmutePlayer_argsTupleSchemeFactory());
    }

    public long playerId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLAYER_ID((short)1, "playerId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLAYER_ID
            return PLAYER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PLAYERID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLAYER_ID, new org.apache.thrift.meta_data.FieldMetaData("playerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "UserId")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unmutePlayer_args.class, metaDataMap);
    }

    public unmutePlayer_args() {
    }

    public unmutePlayer_args(
      long playerId)
    {
      this();
      this.playerId = playerId;
      setPlayerIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unmutePlayer_args(unmutePlayer_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.playerId = other.playerId;
    }

    public unmutePlayer_args deepCopy() {
      return new unmutePlayer_args(this);
    }

    @Override
    public void clear() {
      setPlayerIdIsSet(false);
      this.playerId = 0;
    }

    public long getPlayerId() {
      return this.playerId;
    }

    public unmutePlayer_args setPlayerId(long playerId) {
      this.playerId = playerId;
      setPlayerIdIsSet(true);
      return this;
    }

    public void unsetPlayerId() {
      __isset_bit_vector.clear(__PLAYERID_ISSET_ID);
    }

    /** Returns true if field playerId is set (has been assigned a value) and false otherwise */
    public boolean isSetPlayerId() {
      return __isset_bit_vector.get(__PLAYERID_ISSET_ID);
    }

    public void setPlayerIdIsSet(boolean value) {
      __isset_bit_vector.set(__PLAYERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLAYER_ID:
        if (value == null) {
          unsetPlayerId();
        } else {
          setPlayerId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLAYER_ID:
        return Long.valueOf(getPlayerId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLAYER_ID:
        return isSetPlayerId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unmutePlayer_args)
        return this.equals((unmutePlayer_args)that);
      return false;
    }

    public boolean equals(unmutePlayer_args that) {
      if (that == null)
        return false;

      boolean this_present_playerId = true;
      boolean that_present_playerId = true;
      if (this_present_playerId || that_present_playerId) {
        if (!(this_present_playerId && that_present_playerId))
          return false;
        if (this.playerId != that.playerId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(unmutePlayer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      unmutePlayer_args typedOther = (unmutePlayer_args)other;

      lastComparison = Boolean.valueOf(isSetPlayerId()).compareTo(typedOther.isSetPlayerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlayerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playerId, typedOther.playerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unmutePlayer_args(");
      boolean first = true;

      sb.append("playerId:");
      sb.append(this.playerId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unmutePlayer_argsStandardSchemeFactory implements SchemeFactory {
      public unmutePlayer_argsStandardScheme getScheme() {
        return new unmutePlayer_argsStandardScheme();
      }
    }

    private static class unmutePlayer_argsStandardScheme extends StandardScheme<unmutePlayer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unmutePlayer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLAYER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.playerId = iprot.readI64();
                struct.setPlayerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unmutePlayer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PLAYER_ID_FIELD_DESC);
        oprot.writeI64(struct.playerId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unmutePlayer_argsTupleSchemeFactory implements SchemeFactory {
      public unmutePlayer_argsTupleScheme getScheme() {
        return new unmutePlayer_argsTupleScheme();
      }
    }

    private static class unmutePlayer_argsTupleScheme extends TupleScheme<unmutePlayer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unmutePlayer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlayerId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPlayerId()) {
          oprot.writeI64(struct.playerId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unmutePlayer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.playerId = iprot.readI64();
          struct.setPlayerIdIsSet(true);
        }
      }
    }

  }

  public static class unmutePlayer_result implements org.apache.thrift.TBase<unmutePlayer_result, unmutePlayer_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unmutePlayer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unmutePlayer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unmutePlayer_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public LTTException exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unmutePlayer_result.class, metaDataMap);
    }

    public unmutePlayer_result() {
    }

    public unmutePlayer_result(
      boolean success,
      LTTException exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unmutePlayer_result(unmutePlayer_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetExc()) {
        this.exc = new LTTException(other.exc);
      }
    }

    public unmutePlayer_result deepCopy() {
      return new unmutePlayer_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.exc = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public unmutePlayer_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public LTTException getExc() {
      return this.exc;
    }

    public unmutePlayer_result setExc(LTTException exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((LTTException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unmutePlayer_result)
        return this.equals((unmutePlayer_result)that);
      return false;
    }

    public boolean equals(unmutePlayer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(unmutePlayer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      unmutePlayer_result typedOther = (unmutePlayer_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(typedOther.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, typedOther.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unmutePlayer_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unmutePlayer_resultStandardSchemeFactory implements SchemeFactory {
      public unmutePlayer_resultStandardScheme getScheme() {
        return new unmutePlayer_resultStandardScheme();
      }
    }

    private static class unmutePlayer_resultStandardScheme extends StandardScheme<unmutePlayer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unmutePlayer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new LTTException();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unmutePlayer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unmutePlayer_resultTupleSchemeFactory implements SchemeFactory {
      public unmutePlayer_resultTupleScheme getScheme() {
        return new unmutePlayer_resultTupleScheme();
      }
    }

    private static class unmutePlayer_resultTupleScheme extends TupleScheme<unmutePlayer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unmutePlayer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unmutePlayer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new LTTException();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class listMutedPlayers_args implements org.apache.thrift.TBase<listMutedPlayers_args, listMutedPlayers_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listMutedPlayers_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listMutedPlayers_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listMutedPlayers_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listMutedPlayers_args.class, metaDataMap);
    }

    public listMutedPlayers_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listMutedPlayers_args(listMutedPlayers_args other) {
    }

    public listMutedPlayers_args deepCopy() {
      return new listMutedPlayers_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listMutedPlayers_args)
        return this.equals((listMutedPlayers_args)that);
      return false;
    }

    public boolean equals(listMutedPlayers_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listMutedPlayers_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listMutedPlayers_args typedOther = (listMutedPlayers_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listMutedPlayers_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listMutedPlayers_argsStandardSchemeFactory implements SchemeFactory {
      public listMutedPlayers_argsStandardScheme getScheme() {
        return new listMutedPlayers_argsStandardScheme();
      }
    }

    private static class listMutedPlayers_argsStandardScheme extends StandardScheme<listMutedPlayers_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listMutedPlayers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listMutedPlayers_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listMutedPlayers_argsTupleSchemeFactory implements SchemeFactory {
      public listMutedPlayers_argsTupleScheme getScheme() {
        return new listMutedPlayers_argsTupleScheme();
      }
    }

    private static class listMutedPlayers_argsTupleScheme extends TupleScheme<listMutedPlayers_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listMutedPlayers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listMutedPlayers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class listMutedPlayers_result implements org.apache.thrift.TBase<listMutedPlayers_result, listMutedPlayers_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listMutedPlayers_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listMutedPlayers_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listMutedPlayers_resultTupleSchemeFactory());
    }

    public List<Long> success; // required
    public LTTException exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64              , "UserId"))));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listMutedPlayers_result.class, metaDataMap);
    }

    public listMutedPlayers_result() {
    }

    public listMutedPlayers_result(
      List<Long> success,
      LTTException exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listMutedPlayers_result(listMutedPlayers_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>();
        for (Long other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetExc()) {
        this.exc = new LTTException(other.exc);
      }
    }

    public listMutedPlayers_result deepCopy() {
      return new listMutedPlayers_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public listMutedPlayers_result setSuccess(List<Long> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public LTTException getExc() {
      return this.exc;
    }

    public listMutedPlayers_result setExc(LTTException exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((LTTException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listMutedPlayers_result)
        return this.equals((listMutedPlayers_result)that);
      return false;
    }

    public boolean equals(listMutedPlayers_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listMutedPlayers_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listMutedPlayers_result typedOther = (listMutedPlayers_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(typedOther.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, typedOther.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listMutedPlayers_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listMutedPlayers_resultStandardSchemeFactory implements SchemeFactory {
      public listMutedPlayers_resultStandardScheme getScheme() {
        return new listMutedPlayers_resultStandardScheme();
      }
    }

    private static class listMutedPlayers_resultStandardScheme extends StandardScheme<listMutedPlayers_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listMutedPlayers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list32.size);
                  for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                  {
                    long _elem34; // required
                    _elem34 = iprot.readI64();
                    struct.success.add(_elem34);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new LTTException();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listMutedPlayers_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter35 : struct.success)
            {
              oprot.writeI64(_iter35);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listMutedPlayers_resultTupleSchemeFactory implements SchemeFactory {
      public listMutedPlayers_resultTupleScheme getScheme() {
        return new listMutedPlayers_resultTupleScheme();
      }
    }

    private static class listMutedPlayers_resultTupleScheme extends TupleScheme<listMutedPlayers_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listMutedPlayers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter36 : struct.success)
            {
              oprot.writeI64(_iter36);
            }
          }
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listMutedPlayers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list37.size);
            for (int _i38 = 0; _i38 < _list37.size; ++_i38)
            {
              long _elem39; // required
              _elem39 = iprot.readI64();
              struct.success.add(_elem39);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new LTTException();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class inviteToRoom_args implements org.apache.thrift.TBase<inviteToRoom_args, inviteToRoom_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("inviteToRoom_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ROOM_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("roomTitle", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ROOM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("roomName", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new inviteToRoom_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new inviteToRoom_argsTupleSchemeFactory());
    }

    public long userId; // required
    public String roomTitle; // required
    public String roomName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      ROOM_TITLE((short)2, "roomTitle"),
      ROOM_NAME((short)3, "roomName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // ROOM_TITLE
            return ROOM_TITLE;
          case 3: // ROOM_NAME
            return ROOM_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "UserId")));
      tmpMap.put(_Fields.ROOM_TITLE, new org.apache.thrift.meta_data.FieldMetaData("roomTitle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ROOM_NAME, new org.apache.thrift.meta_data.FieldMetaData("roomName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "RoomName")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(inviteToRoom_args.class, metaDataMap);
    }

    public inviteToRoom_args() {
    }

    public inviteToRoom_args(
      long userId,
      String roomTitle,
      String roomName)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.roomTitle = roomTitle;
      this.roomName = roomName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public inviteToRoom_args(inviteToRoom_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.userId = other.userId;
      if (other.isSetRoomTitle()) {
        this.roomTitle = other.roomTitle;
      }
      if (other.isSetRoomName()) {
        this.roomName = other.roomName;
      }
    }

    public inviteToRoom_args deepCopy() {
      return new inviteToRoom_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      this.roomTitle = null;
      this.roomName = null;
    }

    public long getUserId() {
      return this.userId;
    }

    public inviteToRoom_args setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bit_vector.clear(__USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return __isset_bit_vector.get(__USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bit_vector.set(__USERID_ISSET_ID, value);
    }

    public String getRoomTitle() {
      return this.roomTitle;
    }

    public inviteToRoom_args setRoomTitle(String roomTitle) {
      this.roomTitle = roomTitle;
      return this;
    }

    public void unsetRoomTitle() {
      this.roomTitle = null;
    }

    /** Returns true if field roomTitle is set (has been assigned a value) and false otherwise */
    public boolean isSetRoomTitle() {
      return this.roomTitle != null;
    }

    public void setRoomTitleIsSet(boolean value) {
      if (!value) {
        this.roomTitle = null;
      }
    }

    public String getRoomName() {
      return this.roomName;
    }

    public inviteToRoom_args setRoomName(String roomName) {
      this.roomName = roomName;
      return this;
    }

    public void unsetRoomName() {
      this.roomName = null;
    }

    /** Returns true if field roomName is set (has been assigned a value) and false otherwise */
    public boolean isSetRoomName() {
      return this.roomName != null;
    }

    public void setRoomNameIsSet(boolean value) {
      if (!value) {
        this.roomName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Long)value);
        }
        break;

      case ROOM_TITLE:
        if (value == null) {
          unsetRoomTitle();
        } else {
          setRoomTitle((String)value);
        }
        break;

      case ROOM_NAME:
        if (value == null) {
          unsetRoomName();
        } else {
          setRoomName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return Long.valueOf(getUserId());

      case ROOM_TITLE:
        return getRoomTitle();

      case ROOM_NAME:
        return getRoomName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case ROOM_TITLE:
        return isSetRoomTitle();
      case ROOM_NAME:
        return isSetRoomName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof inviteToRoom_args)
        return this.equals((inviteToRoom_args)that);
      return false;
    }

    public boolean equals(inviteToRoom_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_roomTitle = true && this.isSetRoomTitle();
      boolean that_present_roomTitle = true && that.isSetRoomTitle();
      if (this_present_roomTitle || that_present_roomTitle) {
        if (!(this_present_roomTitle && that_present_roomTitle))
          return false;
        if (!this.roomTitle.equals(that.roomTitle))
          return false;
      }

      boolean this_present_roomName = true && this.isSetRoomName();
      boolean that_present_roomName = true && that.isSetRoomName();
      if (this_present_roomName || that_present_roomName) {
        if (!(this_present_roomName && that_present_roomName))
          return false;
        if (!this.roomName.equals(that.roomName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(inviteToRoom_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      inviteToRoom_args typedOther = (inviteToRoom_args)other;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRoomTitle()).compareTo(typedOther.isSetRoomTitle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoomTitle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomTitle, typedOther.roomTitle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRoomName()).compareTo(typedOther.isSetRoomName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoomName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomName, typedOther.roomName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("inviteToRoom_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("roomTitle:");
      if (this.roomTitle == null) {
        sb.append("null");
      } else {
        sb.append(this.roomTitle);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("roomName:");
      if (this.roomName == null) {
        sb.append("null");
      } else {
        sb.append(this.roomName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class inviteToRoom_argsStandardSchemeFactory implements SchemeFactory {
      public inviteToRoom_argsStandardScheme getScheme() {
        return new inviteToRoom_argsStandardScheme();
      }
    }

    private static class inviteToRoom_argsStandardScheme extends StandardScheme<inviteToRoom_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, inviteToRoom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userId = iprot.readI64();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ROOM_TITLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.roomTitle = iprot.readString();
                struct.setRoomTitleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ROOM_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.roomName = iprot.readString();
                struct.setRoomNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, inviteToRoom_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
        if (struct.roomTitle != null) {
          oprot.writeFieldBegin(ROOM_TITLE_FIELD_DESC);
          oprot.writeString(struct.roomTitle);
          oprot.writeFieldEnd();
        }
        if (struct.roomName != null) {
          oprot.writeFieldBegin(ROOM_NAME_FIELD_DESC);
          oprot.writeString(struct.roomName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class inviteToRoom_argsTupleSchemeFactory implements SchemeFactory {
      public inviteToRoom_argsTupleScheme getScheme() {
        return new inviteToRoom_argsTupleScheme();
      }
    }

    private static class inviteToRoom_argsTupleScheme extends TupleScheme<inviteToRoom_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, inviteToRoom_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetRoomTitle()) {
          optionals.set(1);
        }
        if (struct.isSetRoomName()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserId()) {
          oprot.writeI64(struct.userId);
        }
        if (struct.isSetRoomTitle()) {
          oprot.writeString(struct.roomTitle);
        }
        if (struct.isSetRoomName()) {
          oprot.writeString(struct.roomName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, inviteToRoom_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userId = iprot.readI64();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.roomTitle = iprot.readString();
          struct.setRoomTitleIsSet(true);
        }
        if (incoming.get(2)) {
          struct.roomName = iprot.readString();
          struct.setRoomNameIsSet(true);
        }
      }
    }

  }

  public static class inviteToRoom_result implements org.apache.thrift.TBase<inviteToRoom_result, inviteToRoom_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("inviteToRoom_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new inviteToRoom_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new inviteToRoom_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(inviteToRoom_result.class, metaDataMap);
    }

    public inviteToRoom_result() {
    }

    public inviteToRoom_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public inviteToRoom_result(inviteToRoom_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public inviteToRoom_result deepCopy() {
      return new inviteToRoom_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public inviteToRoom_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof inviteToRoom_result)
        return this.equals((inviteToRoom_result)that);
      return false;
    }

    public boolean equals(inviteToRoom_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(inviteToRoom_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      inviteToRoom_result typedOther = (inviteToRoom_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("inviteToRoom_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class inviteToRoom_resultStandardSchemeFactory implements SchemeFactory {
      public inviteToRoom_resultStandardScheme getScheme() {
        return new inviteToRoom_resultStandardScheme();
      }
    }

    private static class inviteToRoom_resultStandardScheme extends StandardScheme<inviteToRoom_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, inviteToRoom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, inviteToRoom_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class inviteToRoom_resultTupleSchemeFactory implements SchemeFactory {
      public inviteToRoom_resultTupleScheme getScheme() {
        return new inviteToRoom_resultTupleScheme();
      }
    }

    private static class inviteToRoom_resultTupleScheme extends TupleScheme<inviteToRoom_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, inviteToRoom_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, inviteToRoom_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class recall_args implements org.apache.thrift.TBase<recall_args, recall_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recall_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ROOM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("roomName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new recall_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new recall_argsTupleSchemeFactory());
    }

    public long userId; // required
    public String roomName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      ROOM_NAME((short)2, "roomName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // ROOM_NAME
            return ROOM_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "UserId")));
      tmpMap.put(_Fields.ROOM_NAME, new org.apache.thrift.meta_data.FieldMetaData("roomName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "RoomName")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recall_args.class, metaDataMap);
    }

    public recall_args() {
    }

    public recall_args(
      long userId,
      String roomName)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.roomName = roomName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recall_args(recall_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.userId = other.userId;
      if (other.isSetRoomName()) {
        this.roomName = other.roomName;
      }
    }

    public recall_args deepCopy() {
      return new recall_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      this.roomName = null;
    }

    public long getUserId() {
      return this.userId;
    }

    public recall_args setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bit_vector.clear(__USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return __isset_bit_vector.get(__USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bit_vector.set(__USERID_ISSET_ID, value);
    }

    public String getRoomName() {
      return this.roomName;
    }

    public recall_args setRoomName(String roomName) {
      this.roomName = roomName;
      return this;
    }

    public void unsetRoomName() {
      this.roomName = null;
    }

    /** Returns true if field roomName is set (has been assigned a value) and false otherwise */
    public boolean isSetRoomName() {
      return this.roomName != null;
    }

    public void setRoomNameIsSet(boolean value) {
      if (!value) {
        this.roomName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Long)value);
        }
        break;

      case ROOM_NAME:
        if (value == null) {
          unsetRoomName();
        } else {
          setRoomName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return Long.valueOf(getUserId());

      case ROOM_NAME:
        return getRoomName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case ROOM_NAME:
        return isSetRoomName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof recall_args)
        return this.equals((recall_args)that);
      return false;
    }

    public boolean equals(recall_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_roomName = true && this.isSetRoomName();
      boolean that_present_roomName = true && that.isSetRoomName();
      if (this_present_roomName || that_present_roomName) {
        if (!(this_present_roomName && that_present_roomName))
          return false;
        if (!this.roomName.equals(that.roomName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(recall_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      recall_args typedOther = (recall_args)other;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRoomName()).compareTo(typedOther.isSetRoomName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoomName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomName, typedOther.roomName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("recall_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("roomName:");
      if (this.roomName == null) {
        sb.append("null");
      } else {
        sb.append(this.roomName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recall_argsStandardSchemeFactory implements SchemeFactory {
      public recall_argsStandardScheme getScheme() {
        return new recall_argsStandardScheme();
      }
    }

    private static class recall_argsStandardScheme extends StandardScheme<recall_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, recall_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userId = iprot.readI64();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ROOM_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.roomName = iprot.readString();
                struct.setRoomNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, recall_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
        if (struct.roomName != null) {
          oprot.writeFieldBegin(ROOM_NAME_FIELD_DESC);
          oprot.writeString(struct.roomName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recall_argsTupleSchemeFactory implements SchemeFactory {
      public recall_argsTupleScheme getScheme() {
        return new recall_argsTupleScheme();
      }
    }

    private static class recall_argsTupleScheme extends TupleScheme<recall_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, recall_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetRoomName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserId()) {
          oprot.writeI64(struct.userId);
        }
        if (struct.isSetRoomName()) {
          oprot.writeString(struct.roomName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, recall_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readI64();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.roomName = iprot.readString();
          struct.setRoomNameIsSet(true);
        }
      }
    }

  }

  public static class recall_result implements org.apache.thrift.TBase<recall_result, recall_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recall_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new recall_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new recall_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recall_result.class, metaDataMap);
    }

    public recall_result() {
    }

    public recall_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recall_result(recall_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public recall_result deepCopy() {
      return new recall_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public recall_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof recall_result)
        return this.equals((recall_result)that);
      return false;
    }

    public boolean equals(recall_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(recall_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      recall_result typedOther = (recall_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("recall_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recall_resultStandardSchemeFactory implements SchemeFactory {
      public recall_resultStandardScheme getScheme() {
        return new recall_resultStandardScheme();
      }
    }

    private static class recall_resultStandardScheme extends StandardScheme<recall_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, recall_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, recall_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recall_resultTupleSchemeFactory implements SchemeFactory {
      public recall_resultTupleScheme getScheme() {
        return new recall_resultTupleScheme();
      }
    }

    private static class recall_resultTupleScheme extends TupleScheme<recall_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, recall_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, recall_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class clearCache_args implements org.apache.thrift.TBase<clearCache_args, clearCache_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("clearCache_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new clearCache_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new clearCache_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(clearCache_args.class, metaDataMap);
    }

    public clearCache_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clearCache_args(clearCache_args other) {
    }

    public clearCache_args deepCopy() {
      return new clearCache_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof clearCache_args)
        return this.equals((clearCache_args)that);
      return false;
    }

    public boolean equals(clearCache_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(clearCache_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      clearCache_args typedOther = (clearCache_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("clearCache_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class clearCache_argsStandardSchemeFactory implements SchemeFactory {
      public clearCache_argsStandardScheme getScheme() {
        return new clearCache_argsStandardScheme();
      }
    }

    private static class clearCache_argsStandardScheme extends StandardScheme<clearCache_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, clearCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, clearCache_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class clearCache_argsTupleSchemeFactory implements SchemeFactory {
      public clearCache_argsTupleScheme getScheme() {
        return new clearCache_argsTupleScheme();
      }
    }

    private static class clearCache_argsTupleScheme extends TupleScheme<clearCache_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, clearCache_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, clearCache_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class clearCache_result implements org.apache.thrift.TBase<clearCache_result, clearCache_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("clearCache_result");

    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new clearCache_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new clearCache_resultTupleSchemeFactory());
    }

    public LTTException exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(clearCache_result.class, metaDataMap);
    }

    public clearCache_result() {
    }

    public clearCache_result(
      LTTException exc)
    {
      this();
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clearCache_result(clearCache_result other) {
      if (other.isSetExc()) {
        this.exc = new LTTException(other.exc);
      }
    }

    public clearCache_result deepCopy() {
      return new clearCache_result(this);
    }

    @Override
    public void clear() {
      this.exc = null;
    }

    public LTTException getExc() {
      return this.exc;
    }

    public clearCache_result setExc(LTTException exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((LTTException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof clearCache_result)
        return this.equals((clearCache_result)that);
      return false;
    }

    public boolean equals(clearCache_result that) {
      if (that == null)
        return false;

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(clearCache_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      clearCache_result typedOther = (clearCache_result)other;

      lastComparison = Boolean.valueOf(isSetExc()).compareTo(typedOther.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, typedOther.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("clearCache_result(");
      boolean first = true;

      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class clearCache_resultStandardSchemeFactory implements SchemeFactory {
      public clearCache_resultStandardScheme getScheme() {
        return new clearCache_resultStandardScheme();
      }
    }

    private static class clearCache_resultStandardScheme extends StandardScheme<clearCache_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, clearCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new LTTException();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, clearCache_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class clearCache_resultTupleSchemeFactory implements SchemeFactory {
      public clearCache_resultTupleScheme getScheme() {
        return new clearCache_resultTupleScheme();
      }
    }

    private static class clearCache_resultTupleScheme extends TupleScheme<clearCache_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, clearCache_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExc()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, clearCache_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.exc = new LTTException();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class clearArticleAndItemTypeCache_args implements org.apache.thrift.TBase<clearArticleAndItemTypeCache_args, clearArticleAndItemTypeCache_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("clearArticleAndItemTypeCache_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new clearArticleAndItemTypeCache_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new clearArticleAndItemTypeCache_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(clearArticleAndItemTypeCache_args.class, metaDataMap);
    }

    public clearArticleAndItemTypeCache_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clearArticleAndItemTypeCache_args(clearArticleAndItemTypeCache_args other) {
    }

    public clearArticleAndItemTypeCache_args deepCopy() {
      return new clearArticleAndItemTypeCache_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof clearArticleAndItemTypeCache_args)
        return this.equals((clearArticleAndItemTypeCache_args)that);
      return false;
    }

    public boolean equals(clearArticleAndItemTypeCache_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(clearArticleAndItemTypeCache_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      clearArticleAndItemTypeCache_args typedOther = (clearArticleAndItemTypeCache_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("clearArticleAndItemTypeCache_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class clearArticleAndItemTypeCache_argsStandardSchemeFactory implements SchemeFactory {
      public clearArticleAndItemTypeCache_argsStandardScheme getScheme() {
        return new clearArticleAndItemTypeCache_argsStandardScheme();
      }
    }

    private static class clearArticleAndItemTypeCache_argsStandardScheme extends StandardScheme<clearArticleAndItemTypeCache_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, clearArticleAndItemTypeCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, clearArticleAndItemTypeCache_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class clearArticleAndItemTypeCache_argsTupleSchemeFactory implements SchemeFactory {
      public clearArticleAndItemTypeCache_argsTupleScheme getScheme() {
        return new clearArticleAndItemTypeCache_argsTupleScheme();
      }
    }

    private static class clearArticleAndItemTypeCache_argsTupleScheme extends TupleScheme<clearArticleAndItemTypeCache_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, clearArticleAndItemTypeCache_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, clearArticleAndItemTypeCache_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class clearArticleAndItemTypeCache_result implements org.apache.thrift.TBase<clearArticleAndItemTypeCache_result, clearArticleAndItemTypeCache_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("clearArticleAndItemTypeCache_result");

    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new clearArticleAndItemTypeCache_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new clearArticleAndItemTypeCache_resultTupleSchemeFactory());
    }

    public LTTException exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(clearArticleAndItemTypeCache_result.class, metaDataMap);
    }

    public clearArticleAndItemTypeCache_result() {
    }

    public clearArticleAndItemTypeCache_result(
      LTTException exc)
    {
      this();
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clearArticleAndItemTypeCache_result(clearArticleAndItemTypeCache_result other) {
      if (other.isSetExc()) {
        this.exc = new LTTException(other.exc);
      }
    }

    public clearArticleAndItemTypeCache_result deepCopy() {
      return new clearArticleAndItemTypeCache_result(this);
    }

    @Override
    public void clear() {
      this.exc = null;
    }

    public LTTException getExc() {
      return this.exc;
    }

    public clearArticleAndItemTypeCache_result setExc(LTTException exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((LTTException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof clearArticleAndItemTypeCache_result)
        return this.equals((clearArticleAndItemTypeCache_result)that);
      return false;
    }

    public boolean equals(clearArticleAndItemTypeCache_result that) {
      if (that == null)
        return false;

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(clearArticleAndItemTypeCache_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      clearArticleAndItemTypeCache_result typedOther = (clearArticleAndItemTypeCache_result)other;

      lastComparison = Boolean.valueOf(isSetExc()).compareTo(typedOther.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, typedOther.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("clearArticleAndItemTypeCache_result(");
      boolean first = true;

      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class clearArticleAndItemTypeCache_resultStandardSchemeFactory implements SchemeFactory {
      public clearArticleAndItemTypeCache_resultStandardScheme getScheme() {
        return new clearArticleAndItemTypeCache_resultStandardScheme();
      }
    }

    private static class clearArticleAndItemTypeCache_resultStandardScheme extends StandardScheme<clearArticleAndItemTypeCache_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, clearArticleAndItemTypeCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new LTTException();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, clearArticleAndItemTypeCache_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class clearArticleAndItemTypeCache_resultTupleSchemeFactory implements SchemeFactory {
      public clearArticleAndItemTypeCache_resultTupleScheme getScheme() {
        return new clearArticleAndItemTypeCache_resultTupleScheme();
      }
    }

    private static class clearArticleAndItemTypeCache_resultTupleScheme extends TupleScheme<clearArticleAndItemTypeCache_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, clearArticleAndItemTypeCache_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExc()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, clearArticleAndItemTypeCache_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.exc = new LTTException();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

}
