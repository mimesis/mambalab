#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'ltt_types'

    module GameService
      module LiveTeamTools
        class Client
          include ::Thrift::Client

          def countAllPlayers()
            send_countAllPlayers()
            return recv_countAllPlayers()
          end

          def send_countAllPlayers()
            send_message('countAllPlayers', CountAllPlayers_args)
          end

          def recv_countAllPlayers()
            result = receive_message(CountAllPlayers_result)
            return result.success unless result.success.nil?
            raise result.exc unless result.exc.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'countAllPlayers failed: unknown result')
          end

          def listAllPlayers()
            send_listAllPlayers()
            return recv_listAllPlayers()
          end

          def send_listAllPlayers()
            send_message('listAllPlayers', ListAllPlayers_args)
          end

          def recv_listAllPlayers()
            result = receive_message(ListAllPlayers_result)
            return result.success unless result.success.nil?
            raise result.exc unless result.exc.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'listAllPlayers failed: unknown result')
          end

          def kickPlayer(userId, ttl, msg)
            send_kickPlayer(userId, ttl, msg)
            return recv_kickPlayer()
          end

          def send_kickPlayer(userId, ttl, msg)
            send_message('kickPlayer', KickPlayer_args, :userId => userId, :ttl => ttl, :msg => msg)
          end

          def recv_kickPlayer()
            result = receive_message(KickPlayer_result)
            return result.success unless result.success.nil?
            raise result.exc unless result.exc.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'kickPlayer failed: unknown result')
          end

          def kickPlayerFromRoom(userId, ttl, title, msg)
            send_kickPlayerFromRoom(userId, ttl, title, msg)
            return recv_kickPlayerFromRoom()
          end

          def send_kickPlayerFromRoom(userId, ttl, title, msg)
            send_message('kickPlayerFromRoom', KickPlayerFromRoom_args, :userId => userId, :ttl => ttl, :title => title, :msg => msg)
          end

          def recv_kickPlayerFromRoom()
            result = receive_message(KickPlayerFromRoom_result)
            return result.success unless result.success.nil?
            raise result.exc unless result.exc.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'kickPlayerFromRoom failed: unknown result')
          end

          def broadcastMessage(msg)
            send_broadcastMessage(msg)
            return recv_broadcastMessage()
          end

          def send_broadcastMessage(msg)
            send_message('broadcastMessage', BroadcastMessage_args, :msg => msg)
          end

          def recv_broadcastMessage()
            result = receive_message(BroadcastMessage_result)
            return result.success unless result.success.nil?
            raise result.exc unless result.exc.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'broadcastMessage failed: unknown result')
          end

          def broadcastNotice(msg)
            send_broadcastNotice(msg)
            return recv_broadcastNotice()
          end

          def send_broadcastNotice(msg)
            send_message('broadcastNotice', BroadcastNotice_args, :msg => msg)
          end

          def recv_broadcastNotice()
            result = receive_message(BroadcastNotice_result)
            return result.success unless result.success.nil?
            raise result.exc unless result.exc.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'broadcastNotice failed: unknown result')
          end

          def disconnectUser(userId, serverName)
            send_disconnectUser(userId, serverName)
            return recv_disconnectUser()
          end

          def send_disconnectUser(userId, serverName)
            send_message('disconnectUser', DisconnectUser_args, :userId => userId, :serverName => serverName)
          end

          def recv_disconnectUser()
            result = receive_message(DisconnectUser_result)
            return result.success unless result.success.nil?
            raise result.exc unless result.exc.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'disconnectUser failed: unknown result')
          end

        end

        class Processor
          include ::Thrift::Processor

          def process_countAllPlayers(seqid, iprot, oprot)
            args = read_args(iprot, CountAllPlayers_args)
            result = CountAllPlayers_result.new()
            begin
              result.success = @handler.countAllPlayers()
            rescue GameService::LTTException => exc
              result.exc = exc
            end
            write_result(result, oprot, 'countAllPlayers', seqid)
          end

          def process_listAllPlayers(seqid, iprot, oprot)
            args = read_args(iprot, ListAllPlayers_args)
            result = ListAllPlayers_result.new()
            begin
              result.success = @handler.listAllPlayers()
            rescue GameService::LTTException => exc
              result.exc = exc
            end
            write_result(result, oprot, 'listAllPlayers', seqid)
          end

          def process_kickPlayer(seqid, iprot, oprot)
            args = read_args(iprot, KickPlayer_args)
            result = KickPlayer_result.new()
            begin
              result.success = @handler.kickPlayer(args.userId, args.ttl, args.msg)
            rescue GameService::LTTException => exc
              result.exc = exc
            end
            write_result(result, oprot, 'kickPlayer', seqid)
          end

          def process_kickPlayerFromRoom(seqid, iprot, oprot)
            args = read_args(iprot, KickPlayerFromRoom_args)
            result = KickPlayerFromRoom_result.new()
            begin
              result.success = @handler.kickPlayerFromRoom(args.userId, args.ttl, args.title, args.msg)
            rescue GameService::LTTException => exc
              result.exc = exc
            end
            write_result(result, oprot, 'kickPlayerFromRoom', seqid)
          end

          def process_broadcastMessage(seqid, iprot, oprot)
            args = read_args(iprot, BroadcastMessage_args)
            result = BroadcastMessage_result.new()
            begin
              result.success = @handler.broadcastMessage(args.msg)
            rescue GameService::LTTException => exc
              result.exc = exc
            end
            write_result(result, oprot, 'broadcastMessage', seqid)
          end

          def process_broadcastNotice(seqid, iprot, oprot)
            args = read_args(iprot, BroadcastNotice_args)
            result = BroadcastNotice_result.new()
            begin
              result.success = @handler.broadcastNotice(args.msg)
            rescue GameService::LTTException => exc
              result.exc = exc
            end
            write_result(result, oprot, 'broadcastNotice', seqid)
          end

          def process_disconnectUser(seqid, iprot, oprot)
            args = read_args(iprot, DisconnectUser_args)
            result = DisconnectUser_result.new()
            begin
              result.success = @handler.disconnectUser(args.userId, args.serverName)
            rescue GameService::LTTException => exc
              result.exc = exc
            end
            write_result(result, oprot, 'disconnectUser', seqid)
          end

        end

        # HELPER FUNCTIONS AND STRUCTURES

        class CountAllPlayers_args
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class CountAllPlayers_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          EXC = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'},
            EXC => {:type => ::Thrift::Types::STRUCT, :name => 'exc', :class => GameService::LTTException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class ListAllPlayers_args
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class ListAllPlayers_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          EXC = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::I64}},
            EXC => {:type => ::Thrift::Types::STRUCT, :name => 'exc', :class => GameService::LTTException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class KickPlayer_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          USERID = 1
          TTL = 2
          MSG = 3

          FIELDS = {
            USERID => {:type => ::Thrift::Types::I64, :name => 'userId'},
            TTL => {:type => ::Thrift::Types::I64, :name => 'ttl'},
            MSG => {:type => ::Thrift::Types::STRING, :name => 'msg'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class KickPlayer_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          EXC = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
            EXC => {:type => ::Thrift::Types::STRUCT, :name => 'exc', :class => GameService::LTTException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class KickPlayerFromRoom_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          USERID = 1
          TTL = 2
          TITLE = 3
          MSG = 4

          FIELDS = {
            USERID => {:type => ::Thrift::Types::I64, :name => 'userId'},
            TTL => {:type => ::Thrift::Types::I64, :name => 'ttl'},
            TITLE => {:type => ::Thrift::Types::STRING, :name => 'title'},
            MSG => {:type => ::Thrift::Types::STRING, :name => 'msg'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class KickPlayerFromRoom_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          EXC = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
            EXC => {:type => ::Thrift::Types::STRUCT, :name => 'exc', :class => GameService::LTTException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class BroadcastMessage_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          MSG = 1

          FIELDS = {
            MSG => {:type => ::Thrift::Types::STRING, :name => 'msg'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class BroadcastMessage_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          EXC = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
            EXC => {:type => ::Thrift::Types::STRUCT, :name => 'exc', :class => GameService::LTTException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class BroadcastNotice_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          MSG = 1

          FIELDS = {
            MSG => {:type => ::Thrift::Types::STRING, :name => 'msg'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class BroadcastNotice_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          EXC = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
            EXC => {:type => ::Thrift::Types::STRUCT, :name => 'exc', :class => GameService::LTTException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class DisconnectUser_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          USERID = 1
          SERVERNAME = 2

          FIELDS = {
            USERID => {:type => ::Thrift::Types::I64, :name => 'userId'},
            SERVERNAME => {:type => ::Thrift::Types::STRING, :name => 'serverName'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class DisconnectUser_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          EXC = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
            EXC => {:type => ::Thrift::Types::STRUCT, :name => 'exc', :class => GameService::LTTException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

      end

    end
