#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'cos_types'

    module MrCos
      module Recommendation
        class Client
          include ::Thrift::Client

          def getRecommendations(offerIds)
            send_getRecommendations(offerIds)
            return recv_getRecommendations()
          end

          def send_getRecommendations(offerIds)
            send_message('getRecommendations', GetRecommendations_args, :offerIds => offerIds)
          end

          def recv_getRecommendations()
            result = receive_message(GetRecommendations_result)
            return result.success unless result.success.nil?
            raise result.se unless result.se.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getRecommendations failed: unknown result')
          end

          def ping()
            send_ping()
            return recv_ping()
          end

          def send_ping()
            send_message('ping', Ping_args)
          end

          def recv_ping()
            result = receive_message(Ping_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'ping failed: unknown result')
          end

        end

        class Processor
          include ::Thrift::Processor

          def process_getRecommendations(seqid, iprot, oprot)
            args = read_args(iprot, GetRecommendations_args)
            result = GetRecommendations_result.new()
            begin
              result.success = @handler.getRecommendations(args.offerIds)
            rescue MrCos::ServiceErrorException => se
              result.se = se
            end
            write_result(result, oprot, 'getRecommendations', seqid)
          end

          def process_ping(seqid, iprot, oprot)
            args = read_args(iprot, Ping_args)
            result = Ping_result.new()
            result.success = @handler.ping()
            write_result(result, oprot, 'ping', seqid)
          end

        end

        # HELPER FUNCTIONS AND STRUCTURES

        class GetRecommendations_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          OFFERIDS = 1

          FIELDS = {
            OFFERIDS => {:type => ::Thrift::Types::LIST, :name => 'offerIds', :element => {:type => ::Thrift::Types::STRING}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class GetRecommendations_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0
          SE = 1

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => MrCos::OfferRecommendation}},
            SE => {:type => ::Thrift::Types::STRUCT, :name => 'se', :class => MrCos::ServiceErrorException}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Ping_args
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Ping_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

      end

    end
