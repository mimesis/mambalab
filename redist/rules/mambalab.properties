# Mambalab

mambalabdetected.epl = insert into mambalab select * from MyEvent(eventName="start" and eventParam="mambalab")
mambalabmessage.epl = insert into notifyuser select userId,"*** mambalab activated ***" as message, "System" as title, "Alert" as type from mambalab

# garde la liste des quizz actifs par rooms

mambalabroomsschema.epl = create schema mambalabroomsschema( roomId int,roomName String, quizzId String, panneau1Code String, panneau2Code String)
mambalabroomswindow.epl = create window mambalabrooms.win:keepall() as  mambalabroomsschema
mambalabrooms.epl = insert into mambalabrooms select room_id as roomId, room_name as roomName,  quizz_id as quizzId, panel1_code as panneau1Code, panel2_code as panneau2Code from mambalab ,sql:esper ['select * from room_quizz where activated=1']
mambalabrooms.action = ActivateRooms

# Crée la structure qui va stocker les questions en cours (une max par utilisateur) afin d'en garder trace pour les réponses

MyQuestion.epl = create schema MyQuestion(quizzId String,userId int,roomName String,roomInstance String,questionId int, questionName String, questionType String, questionAnswer String, panneau1 String,  panneau2 String,notification String) 
currentquestionwindow.epl = create window currentQuestion.std:unique(userId)  as select * from MyQuestion

MyAnswer.epl = create schema MyAnswer(userId int,answerString String,userAnswers String, nbTries int,nbTimeout int) 
currentanswerwindow.epl = create window currentAnswer.std:unique(userId)  as select * from MyAnswer


MyQuizz.epl = create schema MyQuizz(userId int,roomName String, roomInstance String,quizzId String, nbQuestion int)
MyQuizzWindow.epl = create window quizz.std:unique(userId) as select * from MyQuizz

# Détecte le démarrage du quizz, cleanup des anciennes réponses

# 1- clean up & start le quizz (on restart event)

detectrestartquizz.epl = @Drop insert into quizzwouldliketorestart select userId,roomName,roomInstance,(select quizzId from mambalabrooms  where mambalabrooms.roomName=MyEvent.roomName) from MyEvent(eventName='SAY' and eventParam like '/restart')
detectrestartquizz.sql = esper: delete from answers where user_id=${userId} and quizz_id=${quizzId}	

restartquizz.epl =  insert into enterroom select userId,roomName,roomInstance from quizzwouldliketorestart


# 2- start le quizz (on enter_room or start event)

detectstartquizz.epl = @Drop insert into enterroom select userId,roomName,roomInstance from MyEvent(eventName='SAY' and eventParam like '/start') 

enterroomquizz.epl = insert into enterroom select userId,roomName,roomInstance from MyEvent(eventName='ENTER_ROOM')
startquizzfromenterroom.epl = on enterroom insert into quizzwouldliketostart select enterroom.userId as userId,enterroom.roomName as roomName,enterroom.roomInstance as roomInstance,quizzId from mambalabrooms where mambalabrooms.roomName=enterroom.roomName


# cleanup
#deleteformerquizz.epl = on enterroom delete from quizz where enterroom.userId=quizz.userId and not enterroom.roomName=quizz.roomName
#deleteformerquestion.epl = on enterroom delete from currentQuestion where enterroom.userId=currentQuestion.userId and not enterroom.roomName=currentQuestion.roomName
#deleteformeranswer.epl = on enterroom delete from currentAnswer where enterroom.userId=currentAnswer.userId 

deleteformerquizz.epl = @Priority(100) on enterroom delete from quizz where enterroom.userId=quizz.userId 
deleteformerquestion.epl = @Priority(100) on enterroom delete from currentQuestion where enterroom.userId=currentQuestion.userId 
deleteformeranswer.epl = @Priority(100) on enterroom delete from currentAnswer where enterroom.userId=currentAnswer.userId 

# Démarage du quizz

startquizz.epl = insert into quizz select userId,roomName,roomInstance, quizzId, 0 as nbQuestion from quizzwouldliketostart \
 				where not exists (select * from currentQuestion where currentQuestion.userId = quizzwouldliketostart.userId)

quizzalreadystarted.epl = insert into trace select userId,"already started" as message from quizzwouldliketostart \
			where exists (select * from currentQuestion where currentQuestion.userId = quizzwouldliketostart.userId)

# Cherche la prochaine question pour l'utilisateur 

findnextquestion.epl = insert into nextQuestion select roomName,roomInstance,quizzId,userId,questionId from quizz,\
						sql:esper ['select if(D.next_condition is not null and D.next_condition=D.last_answer,D.next_question_id, \
						if(D.next_condition is not null and D.next_condition<>D.last_answer,D.next_naturalquestion_id, \
						if(D.next_condition is null and D.next_question_id is not null,D.next_question_id, \
						D.next_naturalquestion_id)))  \
						 as questionId \
						from \
						( \
						select P.last_question,P.last_answer,P.next_condition,P.next_question_id,quizz.question_id as next_naturalquestion_id from \
						( \
						select answers.question_id as last_question,answers.answer as last_answer,next_question_id,next_condition from answers \
						left join quizz on answers.question_id=quizz.question_id where answers.quizz_id=${quizzId} and answers.user_id=${userId}   \
						order by answers.question_id desc limit 1 ) as P \
						left join quizz on quizz.quizz_id=${quizzId}  where quizz.question_id > P.last_question and quizz.question_id>0 order by quizz.question_id limit 1 \
						) as D\
						']
#sauf si c'était la première
						
firstquestion.epl = insert into nextQuestion select roomName,roomInstance,quizzId,userId,cast(questionId, int) as questionId from quizz , \
					sql:esper [' \
					select min_question_id as questionId from \
					( \
					select sum(a) as min_question_id, sum(b) as min_answer_id \
					from \
					( \
					select min(question_id) as a, null as b from quizz where quizz_id=${quizzId} and question_id>0 \
					union \
					select null as a, min(question_id) as b from answers where quizz_id=${quizzId} and user_id=${userId} \
					) P \
					) Q \
					where min_answer_id is null \
					']

nomorequestion.epl = insert into nomoreQuestion select roomName,roomInstance,quizzId,userId,nbQuestion from quizz, \
					sql:esper [' \
					select *  from ( \
					select quizz.question_id as qid,A.question_id as aid from quizz \
					left join (select * from answers where quizz_id=${quizzId} and user_id=${userId}) as A \
					 on quizz.question_id=A.question_id \
					where quizz.quizz_id=${quizzId} and quizz.question_id>0 order by quizz.question_id desc limit 1 \
					) as P where qid=aid'] 


# enregistre la question 
currentquestion.epl = insert into currentQuestion select quizzId,userId,roomName,roomInstance,questionId,questionName,questionType,questionAnswer ,panneau1, panneau2,  notification from nextQuestion, \
						sql:esper ['select question_name as questionName, quizz_type as questionType, answer as questionAnswer,  \
						panneau1, panneau2, notification from quizz where question_id = ${questionId} and quizz_id=${quizzId}']
						
# reset la réponse => déclenche l'affichage 
currentanswer.epl = insert into currentAnswer select userId,null as answerString, null as userAnswers, 0 as nbTries, 0 as nbTimeout from currentQuestion 


# affichage d'une question (aussi utilisé pour timeout & already done)
						
displaymessage.epl = insert into displaymessage select currentAnswer.userId as userId,currentQuestion.roomName as roomName,currentQuestion.roomInstance as roomInstance,notification,panneau1,panneau2,questionId,questionType from currentQuestion,currentAnswer where currentQuestion.userId=currentAnswer.userId

displaynotification.epl =insert into notifyuser select userId,notification as message, "Mamba Lab" as title, "Alert" as type from displaymessage where not questionType="DIALOG" and notification is not null 
displaydialog.epl = insert into notifyuser select userId, notification as message, "PopUp" as type, "Mamba Lab" as title from displaymessage where questionType="DIALOG"

displaypanel1.epl = on displaymessage select mambalabrooms.quizzId as quizzId, 1 as panelId, questionId,displaymessage.roomInstance as roomInstance, mambalabrooms.roomId as roomId, displaymessage.roomName as roomName,panneau1 as url, panneau1Code as target from mambalabrooms where displaymessage.roomName=mambalabrooms.roomName
displaypanel1.action = ChangeContent

triggerpannel2.epl = insert into triggeredPanel select  p.roomName as roomName,p.roomInstance as roomInstance,p.questionId as questionId,p.panneau2 as panneau2 from pattern  [ every p=displaymessage -> timer:interval(0.5 sec)]

displaypanel2.epl = on triggeredPanel select  mambalabrooms.quizzId as quizzId, 2 as panelId, questionId,triggeredPanel.roomInstance as roomInstance, mambalabrooms.roomId as roomId,panneau2 as url, panneau2Code as target from mambalabrooms where triggeredPanel.roomName=mambalabrooms.roomName
displaypanel2.action = ChangeContent


# Plus de questions - Done

endofquizz.epl = insert into deleteQuizz select userId from nomoreQuestion where nbQuestion > 0

# Quizz déjà effectué => Affiche la question -2

alreadydone.epl = insert into displaymessage select  userId,roomName,roomInstance,notification,panneau1,panneau2,questionId,questionType from  nomoreQuestion, sql:esper ['select question_id as questionId,quizz_type as questionType, panneau1, panneau2, notification from quizz where question_id = -2 and quizz_id=${quizzId}']  where nbQuestion = 0

# cas 0 DIALOG => PASSE A LA SUIVANTE
dialognextquestion.epl = insert into userAnswer select userId, "OK" as answerString from currentQuestion where questionType="DIALOG"

# clique sur les pannels => renvoie /panel1 ou /panel2

pannel1click.epl = on MyEvent(eventName='CLICK_PANEL') insert into  MyEvent select userId, MyEvent.roomId, MyEvent.roomName as roomName, MyEvent.roomInstance as roomInstance ,'SAY' as eventName, '/PANEL1' as eventParam, '' as eventParam2 from mambalabrooms where mambalabrooms.roomName=MyEvent.roomName and mambalabrooms.panneau1Code = MyEvent.eventParam2 

pannel2click.epl = on MyEvent(eventName='CLICK_PANEL') insert into  MyEvent select userId, MyEvent.roomId, MyEvent.roomName as roomName, MyEvent.roomInstance as roomInstance ,'SAY' as eventName, '/PANEL2' as eventParam, '' as eventParam2 from mambalabrooms where mambalabrooms.roomName=MyEvent.roomName and mambalabrooms.panneau2Code = MyEvent.eventParam2

# recupération de la réponse utilisateur et associe la à la question en cours

useranswer.epl =  insert into userAnswer select userId, eventParam.toLowerCase() as answerString from MyEvent(eventName='SAY')

userquizzanswer.epl =  on userAnswer insert into userQuizzAnswer select \
						userAnswer.userId as userId, \
						currentQuestion.quizzId as quizzId, \
						currentQuestion.questionType as questionType, \
						currentQuestion.questionId as questionId, \
						currentQuestion.questionAnswer as questionAnswer, \
						(select (nbTries+1) as nbTries from  currentAnswer where currentAnswer.userId=userAnswer.userId), \
						(select nbTimeout from  currentAnswer where currentAnswer.userId=userAnswer.userId), \
						(select mambalab.cep.Tools.concat(currentAnswer.userAnswers,userAnswer.answerString,"|") as userAnswers from  currentAnswer where currentAnswer.userId=userAnswer.userId), \
						userAnswer.answerString as answerString \
						from currentQuestion where userAnswer.userId=currentQuestion.userId 

# CAS1 : QCM
qcmanswervalid.epl = insert into userQuizzAnswerAccepted select * from userQuizzAnswer where questionType="QCM" \
					   and mambalab.cep.Tools.wordContains(questionAnswer,answerString)
qcmanswerinvalid.epl =  insert into userQuizzAnswerFailed select * from userQuizzAnswer where questionType="QCM" \
						   and not mambalab.cep.Tools.wordContains(questionAnswer,answerString)
qcminvalidmessage.epl = insert into trace select userId, mambalab.cep.Tools.format("not a qcm answer (%s)",questionAnswer) as message from userQuizzAnswerFailed where questionType="QCM"

# CAS2 : OPEN 
openvalid.epl = insert into userQuizzAnswerAccepted select * from userQuizzAnswer where questionType="OPEN" \
					   and  questionAnswer.contains(answerString) and nbTries>1
 
opennoanswerfailedmessage.epl = insert into messages select userId,"Tu dois saisir au moins un nom" as message from userQuizzAnswer where questionType="OPEN" \
					   and questionAnswer.contains(answerString)  and nbTries<=1

openansweradd.epl =  insert into userQuizzAnswerFailed select * from userQuizzAnswer where questionType="OPEN" \
						   and  not questionAnswer.contains(answerString)
#openansweraddmessage.epl = insert into trace select userId,mambalab.cep.Tools.format("Tapez %s pour terminer",questionAnswer) as message from userQuizzAnswerFailed where questionType="OPEN"

# CAS3 : DIALOG 
dialogvalid.epl = insert into userQuizzAnswerAccepted select * from userQuizzAnswer where questionType="DIALOG"

# Question failed
answerfailed.epl = insert into currentAnswer select userId,answerString,userAnswers, nbTries,nbTimeout from userQuizzAnswerFailed 

# Question succeeded : on l'enregistre et on passe à la suivante

answeracceptedmessage.epl = insert into trace select userId,"userQuizzAnswerAccepted" as message from userQuizzAnswerAccepted
storeanswer.epl = insert into answerStored select * from userQuizzAnswerAccepted										
storeanswer.sql = esper: insert into answers(quizz_id,user_id, question_id, answer,answers,nb_tries,created_at,updated_at) values (${quizzId},${userId}, ${questionId}, ${answerString},${userAnswers},${nbTries},Now(),Now())					
	 
# détruit la question et passe à la question suivante

removequestion.epl = on answerStored delete from currentQuestion where answerStored.userId=currentQuestion.userId 
removeanswer.epl = on answerStored delete from currentAnswer where answerStored.userId=currentAnswer.userId 
proceeedtonextquestion.epl = on answerStored insert into quizz select quizz.roomName as roomName,quizz.roomInstance as roomInstance,answerStored.userId as userId, (quizz.nbQuestion+1) as nbQuestion, quizz.quizzId as quizzId from  quizz where answerStored.userId = quizz.userId 

# l'utilisateur a répondu mais le quizz n'avait pas démarré

answerbutnoquestion.epl = insert into answerButNoQuestion select userAnswer.userId as userId,answerString from userAnswer \
							where not exists (select * from currentQuestion where currentQuestion.userId=userAnswer.userId)
answerbutnoquestionmessage.epl = insert into trace select userId, "quizz not started yet" as message from answerButNoQuestion

# l'utilisateur n'a pas répondu dans les temps, lui notifie et redémarre le quizz en réinjectant la question pour réinitialiser le process

useranswertimeout.epl = 	insert into userTimeOut select p.userId as userId,\
							"*" as answerString,\
							mambalab.cep.Tools.concat(p.userAnswers,"*","|") as userAnswers,\
							(p.nbTries) as nbTries,  \
							(p.nbTimeout+1) as nbTimeout  \
							from pattern [ every p=currentAnswer-> timer:interval(30 sec) and not userAnswer(userId=p.userId)]
restartquiz2.epl = insert into currentAnswer select * from userTimeOut where nbTimeout<100

# Au bout de 5 relance, on considère le quizz en timeout => affiche la question -1

quizzhastimedout.epl = insert into quizzTimeOut select userTimeOut.userId as userId, (select roomName from quizz where quizz.userId=userTimeOut.userId),(select roomInstance from quizz where quizz.userId=userTimeOut.userId),(select quizzId from quizz where quizz.userId=userTimeOut.userId) from userTimeOut where nbTimeout=100

displayquizztimeoutmessage.epl = insert into displaymessage select  userId,roomName,roomInstance,notification,panneau1,panneau2,questionId,questionType from quizzTimeOut,\
	sql:esper ['select question_id as questionId, quizz_type as questionType, panneau1, panneau2, notification from quizz where question_id = -1 and quizz_id=${quizzId}']
deletequizztimeout.epl = insert into deleteQuizz select userId from quizzTimeOut

# détruit le quizz (on quizz_timeout, exit_room,...)

deletequizz.epl = on deleteQuizz delete from quizz where deleteQuizz.userId=quizz.userId
deletecurrentquestion.epl = on deleteQuizz delete from currentQuestion where deleteQuizz.userId=currentQuestion.userId
deletecurrentanswer.epl = on deleteQuizz delete from currentAnswer where deleteQuizz.userId=currentAnswer.userId

# Cleanup quizz on exit room
detectdeletequizz.epl = insert into deleteQuizz select userId from MyEvent(eventName='EXIT_ROOM') 
